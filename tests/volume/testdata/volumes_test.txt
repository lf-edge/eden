{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

eden -t 10s volume ls

# Starting of reboot detector with a 1 reboots limit
! test eden.reboot.test -test.v -timewait=0 -reboot=0 -count=1 &

# Create v1 volume
eden -t 1m volume create -n v-docker {{template "eclient_image"}} --disk-size=200M
stdout 'create volume v-docker with {{template "eclient_image"}} request sent'
eden -t 1m volume create -n v-qcow2 file://{{EdenConfig "eden.root"}}/empty.qcow2 --format=qcow2 --disk-size=200M
stdout 'create volume v-qcow2 with file://{{EdenConfig "eden.root"}}/empty.qcow2 request sent'
eden -t 1m volume create -n v-qcow file://{{EdenConfig "eden.root"}}/empty.qcow --format=qcow --disk-size=560
stdout 'create volume v-qcow with file://{{EdenConfig "eden.root"}}/empty.qcow request sent'
eden -t 1m volume create -n v-vmdk file://{{EdenConfig "eden.root"}}/empty.vmdk --format=vmdk --disk-size=65536
stdout 'create volume v-vmdk with file://{{EdenConfig "eden.root"}}/empty.vmdk request sent'
eden -t 1m volume create -n v-vhdx file://{{EdenConfig "eden.root"}}/empty.vhdx --format=vhdx --disk-size=8388608
stdout 'create volume v-vhdx with file://{{EdenConfig "eden.root"}}/empty.vhdx request sent'

# Wait for ready
test eden.vol.test -test.v -timewait 15m DELIVERED v-qcow2 v-docker v-qcow v-vmdk v-vhdx

# measure reported total space of persist
exec -t 5m bash wait-and-get-half-total.sh
source .env

# allocate volume with size of half total space
eden -t 1m volume create -n blank-vol-1 blank --disk-size=$half_total
test eden.vol.test -test.v -timewait 3m CREATED_VOLUME blank-vol-1

# allocate background info check for volumeErr contains Remaining word
test eden.lim.test -test.v -timewait 3m -test.run TestInfo -out InfoContent.vinfo 'InfoContent.vinfo.volumeErr:Remaining' 'InfoContent.vinfo.displayName:blank-vol-2' &errorwait&

exec sleep 10

# this volume expected to fail because we cannot create two volumes with half of total persist space
eden -t 1m volume create -n blank-vol-2 blank --disk-size=$half_total

# wait for error from the second volume creation process
wait errorwait

# delete the first volume to give space for the second one
eden -t 1m volume delete blank-vol-1
test eden.vol.test -test.v -timewait 5m - blank-vol-1
test eden.vol.test -test.v -timewait 5m CREATED_VOLUME blank-vol-2

exec sleep 10

# wait for error from app with large volume
test eden.lim.test -test.v -timewait 5m -test.run TestInfo -out InfoContent.ainfo 'InfoContent.ainfo.appErr:Remaining' 'InfoContent.ainfo.appName:eclient-mount' &errorwait&

eden pod deploy -n eclient-mount --memory=512MB {{template "eclient_image"}} --mount=src={{EdenConfig "eden.tests"}}/eclient/testdata,dst=/dir --volume-size=$half_total

# wait for error from the app creation process
wait errorwait

# delete old volume and check if app goes into running state
eden -t 1m volume delete blank-vol-2
test eden.vol.test -test.v -timewait 5m - blank-vol-2
test eden.app.test -test.v -timewait 15m RUNNING eclient-mount

exec sleep 10

# check purging of app with large volume
eden pod purge eclient-mount
test eden.app.test -test.v -timewait 2m PURGING eclient-mount
test eden.app.test -test.v -timewait 10m RUNNING eclient-mount

exec sleep 10

eden pod delete eclient-mount
test eden.app.test -test.v -timewait 5m - eclient-mount

# Volume detecting
eden -t 1m volume ls
cp stdout vol_ls
grep '^v-docker\s*' vol_ls
grep '^v-qcow2\s*' vol_ls
grep '^v-qcow\s*' vol_ls
grep '^v-vmdk\s*' vol_ls
grep '^v-vhdx\s*' vol_ls

# Delete by volume's actor
eden -t 1m volume delete v-docker
stdout 'volume v-docker delete done'
eden -t 1m volume delete v-qcow2
stdout 'volume v-qcow2 delete done'
eden -t 1m volume delete v-qcow
stdout 'volume v-qcow delete done'
eden -t 1m volume delete v-vmdk
stdout 'volume v-vmdk delete done'
eden -t 1m volume delete v-vhdx
stdout 'volume v-vhdx delete done'

# Wait for delete
test eden.vol.test -test.v -timewait 5m - v-qcow2 v-docker v-qcow v-vmdk v-vhdx
cp stdout vol_ls
grep 'o volume with v-docker found' vol_ls
grep 'o volume with v-qcow2 found' vol_ls
grep 'o volume with v-qcow found' vol_ls
grep 'o volume with v-vmdk found' vol_ls
grep 'o volume with v-vhdx found' vol_ls

# Volumes detecting
eden -t 1m volume ls
cp stdout vol_ls
! grep '^v-docker\s*' vol_ls
! grep '^v-qcow2\s*' vol_ls
! grep '^v-qcow\s*' vol_ls
! grep '^v-vmdk\s*' vol_ls
! grep '^v-vhdx\s*' vol_ls
! grep '^blank-vol-1\s*' vol_ls
! grep '^blank-vol-2\s*' vol_ls
! grep '^eclient-mount\s*' vol_ls

-- wait-and-get-half-total.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
while true; do
    TOTAL=$($EDEN metric --tail=1 --format=json|jq -r '.dm.disk[] | select(.mountPath=="/persist") | .total')
    if [ "$TOTAL" -gt 0 ]; then
        echo half_total="$(( TOTAL*1024*1024/2 ))">>.env
        exit 0
    fi
    sleep 10
done

# Test's config. file
-- eden-config.yml --
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
