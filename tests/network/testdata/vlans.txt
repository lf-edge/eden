[!exec:bash] stop
[!exec:grep] stop
[!exec:cut] stop
[!exec:curl] stop
[!exec:sleep] stop

# This test deploys 5 applications in total.
# Four of those applications run the same curl and nginx services as used in "test_networking.txt".
# All applications are connected to a NATed local network (10.1.0.0/24), used for access to HTTP endpoints from outside
# through port-maps, but also to an air-gaped switch network split into multiple VLANs (10.2.<vid>.0/24):
#  - app1 and app2 are connected to VLAN 100
#  - app3 is connected to VLAN 200
#  - app4 has initially no VLANs configured, later it is moved to VLAN 100
#
# The fifth application provides DHCP services separately for VLANs 100, 200 and for applications outside VLANs:
#  - VLAN 100 uses IP range 10.2.100.0/24
#  - VLAN 200 uses IP range 10.2.200.0/24
#  - application interfaces without VLAN assignment get IP addresses from the range 10.2.0.0/24

# The application providing DHCP services for multiple VLANs requires netadmin capabilities, otherwise
# it is not permitted to create VLAN sub-interfaces. For security reasons, EVE does not allow to grant these
# capabilities to native containers, therefore it is required to deploy apps as VMs-in-Containers for this test to pass.
exec -t 2m bash check_vm_support.sh
source .env
[!env:with_hw_virt] skip 'Missing HW-assisted virtualization capability'

# TODO: push into the itmoeve repository
{{$image := "docker://milan4zededa/docker-test:1.3"}}

# string to use as the testing sequence
{{$test_data := "TEST_SEQUENCE"}}

# create networks for the test
eden network create 10.1.0.0/24 -n nat
eden network create --type switch --uplink none -n switch
test eden.network.test -test.v -timewait 10m ACTIVATED nat
test eden.network.test -test.v -timewait 10m ACTIVATED switch

# Deploy DHCP server
eden pod deploy -n dhcp-server --memory=512MB --networks=nat --networks=switch -p 8027:80 --mount=src={{EdenConfig "eden.tests"}}/network/testdata/vlans/dhcp-server,dst=/app {{$image}}
test eden.app.test -test.v -timewait 10m RUNNING dhcp-server
exec -t 2m bash wait_and_get_ifconfig.sh dhcp-server 8027
stdout '10.2.100.1  netmask 255.255.255.0'
stdout '10.2.200.1  netmask 255.255.255.0'

# Deploy app1 and connect it to VLAN 100
eden pod deploy -n app1 --memory=512MB --networks=nat --networks=switch -p 8028:80 --vlan=switch:100 --metadata='url={{$test_data}}' {{$image}}
test eden.app.test -test.v -timewait 10m RUNNING app1
exec -t 5m bash wait_and_get_ip.sh app1 8028
grep 'app1_ip=10.2.100.\d+' .env
source .env

# Deploy app2 and connect it to VLAN 100
eden pod deploy -n app2 --memory=512MB --networks=nat --networks=switch -p 8029:80 --vlan=switch:100 --metadata="url=http://${app1_ip}/user-data.html" {{$image}}
test eden.app.test -test.v -timewait 10m RUNNING app2
exec -t 5m bash wait_and_get_ip.sh app2 8029
grep 'app2_ip=10.2.100.\d+' .env
source .env

# Wait for app2 to obtain test_data from app1
exec -t 5m bash wait_and_get_recv_data.sh app2 8029
stdout '{{$test_data}}'

# Deploy app3 and connect it to VLAN 200
eden pod deploy -n app3 --memory=512MB --networks=nat --networks=switch -p 8030:80 --vlan=switch:200 --metadata="url=http://${app1_ip}/user-data.html" {{$image}}
test eden.app.test -test.v -timewait 10m RUNNING app3
exec -t 5m bash wait_and_get_ip.sh app3 8030
grep 'app3_ip=10.2.200.\d+' .env
source .env

# app3 will try to obtain test_data from app1, but it should fail because they are in different VLANs
exec -t 5m bash wait_and_get_recv_data.sh app3 8030
! stdout '{{$test_data}}'

# Deploy app4 outside of VLANs
eden pod deploy -n app4 --memory=512MB --networks=nat --networks=switch -p 8031:80 --metadata="url=http://${app1_ip}/user-data.html" {{$image}}
test eden.app.test -test.v -timewait 10m RUNNING app4
exec -t 5m bash wait_and_get_ip.sh app4 8031
grep 'app4_ip=10.2.0.\d+' .env
source .env

# app4 will try to obtain test_data from app1, but it should fail because app1 is inside VLAN while app4 is not
exec -t 5m bash wait_and_get_recv_data.sh app4 8031
! stdout '{{$test_data}}'

# Modify app4 and move it to the VLAN 100
eden pod modify app4 --networks=nat --networks=switch -p 8031:80 --vlan=switch:100
exec sleep 15
test eden.app.test -test.v -timewait 10m RUNNING app4
exec -t 5m bash wait_and_get_ip.sh app4 8031
grep 'app4_ip=10.2.100.\d+' .env
source .env

# app4 should now be able to obtain test_data from app1
exec -t 5m bash wait_and_get_recv_data.sh app4 8031
stdout '{{$test_data}}'

# Cleanup - undeploy applications
eden pod delete dhcp-server
eden pod delete app1
eden pod delete app2
eden pod delete app3
eden pod delete app4
test eden.app.test -test.v -timewait 10m - dhcp-server app1 app2 app3 app4
eden pod ps
! stdout 'dhcp-server'
! stdout 'app[1-4]'

# Cleanup - remove networks
eden network delete nat
eden network delete switch
test eden.network.test -test.v -timewait 10m - nat switch
eden network ls
! stdout 'nat'
! stdout 'switch'

-- check_vm_support.sh --
#!/bin/sh

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

:>.env
while true;
do
    virt=$($EDEN info --out InfoContent.dinfo.Capabilities.HWAssistedVirtualization | tail -n 1)
    if [ -z "$virt" ]; then
        sleep 3
        continue
    fi
    [ "$virt" == "true" ] && echo "with_hw_virt=true" >>.env
    break
done

-- wait_and_get_ifconfig.sh --
#!/bin/sh

APP=$1
PORT=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

address=http://${HOST}:${PORT}/ifconfig.html
until curl -m 10 $address | grep -q LOOPBACK; do sleep 3; done
curl -m 10 $address

-- wait_and_get_ip.sh --
#!/bin/sh

APP=$1
PORT=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

function get_ip {
    address=http://${HOST}:${PORT}/ifconfig.html
    ifconfig=$(curl -m 10 $address) || return 1
    if [ -z "$ifconfig" ]; then
        return 1
    fi
    interfaces=$(echo "$ifconfig" | grep "^\w" | grep -v LOOPBACK | cut -d: -f1)
    eth1=$(echo "$interfaces" | awk 'NR==2')
    IP=$(echo "$ifconfig" | grep "^${eth1}: " -A 1 | awk '/inet / {print $2}' | cut -d"/" -f1)
    if [ ! -z "$IP" ]; then
        echo "IP address of $APP is: $IP"
        echo "${APP}_ip=$IP" >.env
        return 0
    fi
    return 1
}

until get_ip; do sleep 3; done

-- wait_and_get_recv_data.sh --
#!/bin/sh

APP=$1
PORT=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

address=http://${HOST}:${PORT}/received-data.html

# wait at most 1 minute for received-data.html to be available
for i in `seq 12`
do
    sleep 5
    recv_data=$(curl -m 10 $address)
    if [ ! -z "$recv_data" ]; then
        break
    fi
done
curl -m 10 $address

-- eden-config.yml --
{{/* Test's config file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}