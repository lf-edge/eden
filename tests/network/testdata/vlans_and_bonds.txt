[!exec:bash] stop
[!exec:grep] stop
[!exec:cut] stop
[!exec:curl] stop
[!exec:sleep] stop

skip 'TODO: completely rewrite this test for Eden-SDN'

{{$srvimage := "docker://lfedge/eden-docker-test:83cfe07"}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@{{end}}
{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

# In this test we first create two ethernet loops (pairs of eth interfaces interconnected
# using virtual crossover cables). On both ends of these cables we put bonds to aggregate
# them together as one link (with RR policy). On one end we then configure two VLAN sub-interfaces
# to be used as EVE uplinks (VLAN 100 & 200), while the other end is attached to a switch network
# with applications separated by these VLANs and with a DHCP server connected by a trunk port,
# providing IP allocation separately for each VLAN.
# If bonds and VLAN sub-interfaces work correctly, then applications as well as uplink ports should
# receive IP addresses from the DHCP server and it should be possible to ping between applications
# and EVE through these VLANs.
#
# Network topology:
#
#  bond1.100 (EVE uplink) --+           +-- eth2 -- (eth loop) -- eth3 --+                        +-- (trunk port) -- DHCP server
#                           |           |                                |                        |                   (with VLAN sub-interfaces inside)
#                           +-- bond1 --+                                +-- bond2 -- switch NI --+-- (VLAN 100) -- app1
#                           |           |                                |                        |
#  bond1.200 (EVE uplink) --+           +-- eth4 -- (eth loop) -- eth5 --+                        +-- (VLAN 200) -- app2
#
#


# The application providing DHCP services for VLANs requires netadmin capabilities, otherwise
# it is not permitted to create VLAN sub-interfaces. For security reasons, EVE does not allow
# to grant these capabilities to native containers, therefore it is required to deploy apps
# as VMs-in-Containers for this test to pass.
exec -t 2m bash check_vm_support.sh
source .env
[!env:with_hw_virt] skip 'Missing HW-assisted virtualization capability'

# This test is based on ethernet loops, which are only supported on the QEMU dev model.
{{$devmodel := EdenConfig "eve.devmodel"}}
{{if not (eq $devmodel "ZedVirtual-4G")}}
skip 'Test is supported only on QEMU'
{{end}}

# Apply custom devmodel with ethernet loops, bonds (LAGs) and VLANs.
eden config set $EDEN_CONFIG --key eve.devmodelfile --value $WORK/devmodel.json

# Re-generate device config
message 'Resetting of EVE'
eden eve reset

# Make sure that if test fails mid-through, devmodelfile will be left unset.
eden config set $EDEN_CONFIG --key eve.devmodelfile

# Restart EVE with two ethernet loops.
eden -t 2m eve stop
! stderr .
exec sleep 1m
eden -t 2m eve start --with-eth-loops 2
! stderr .

# Deploy DHCP server inside a switch network
eden network create 10.1.0.0/24 -n ni-nat
test eden.network.test -test.v -timewait 10m ACTIVATED ni-nat
eden network create --type switch --uplink bond-switch -n ni-switch
test eden.network.test -test.v -timewait 10m ACTIVATED ni-switch
eden pod deploy -n dhcp-server --memory=512MB --networks=ni-nat --networks=ni-switch -p 8027:80 --mount=src={{EdenConfig "eden.tests"}}/network/testdata/vlans/dhcp-server,dst=/app {{$srvimage}}
test eden.app.test -test.v -timewait 10m RUNNING dhcp-server
exec -t 2m bash wait_and_get_ifconfig.sh dhcp-server 8027
stdout '10.2.100.1  netmask 255.255.255.0'
stdout '10.2.200.1  netmask 255.255.255.0'

# Deploy applications inside the switch network, separated by VLANs
eden pod deploy -n app1 --memory=512MB -p 2223:22 --networks=ni-nat --networks=ni-switch --vlan=ni-switch:100 {{template "eclient_image"}}
eden pod deploy -n app2 --memory=512MB -p 2224:22 --networks=ni-nat --networks=ni-switch --vlan=ni-switch:200 {{template "eclient_image"}}
test eden.app.test -test.v -timewait 10m RUNNING app1 app2
exec -t 10m bash wait_ssh.sh 2223
exec -t 10m bash wait_ssh.sh 2224

# Create local networks attached to VLAN uplinks.
# While these networks are not used in the test, it makes sense to verify that they can be created.
eden network create 10.11.12.0/24 --uplink vlan100 -n ni-vlan100
test eden.network.test -test.v -timewait 10m ACTIVATED ni-vlan100
eden network create 10.11.13.0/24 --uplink vlan200 -n ni-vlan200
test eden.network.test -test.v -timewait 10m ACTIVATED ni-vlan200

exec -t 5m bash wait_for_uplink_ip.sh bond1.100 vlan100_uplink
grep 'vlan100_uplink_ip=10.2.100.\d+' .env
source .env
exec -t 5m bash wait_for_uplink_ip.sh bond1.200 vlan200_uplink
grep 'vlan200_uplink_ip=10.2.200.\d+' .env
source .env

exec -t 5m bash wait_for_app_ip.sh app1 2223
grep 'app1_ip=10.2.100.\d+' .env
source .env
exec -t 5m bash wait_for_app_ip.sh app2 2224
grep 'app2_ip=10.2.200.\d+' .env
source .env

exec -t 2m bash ping_from_app_to_uplink.sh 2223 ${vlan100_uplink_ip}
exec -t 2m bash ping_from_app_to_uplink.sh 2224 ${vlan200_uplink_ip}

# Cleanup - undeploy applications
eden pod delete dhcp-server
eden pod delete app1
eden pod delete app2
test eden.app.test -test.v -timewait 10m - dhcp-server app1 app2
eden pod ps
! stdout 'dhcp-server'
! stdout 'app'

# Cleanup - remove networks
eden network delete ni-nat
eden network delete ni-switch
eden network delete ni-vlan100
eden network delete ni-vlan200
test eden.network.test -test.v -timewait 10m - ni-nat ni-switch ni-vlan100 ni-vlan200
eden network ls
! stdout 'ni-'

# Restore original devmodel (devmodelfile is already unset in the config)
message 'Resetting of EVE'
eden eve reset

# Restart EVE into the original state
eden -t 2m eve stop
! stderr .
exec sleep 1m
eden -t 2m eve start
! stderr .

# wait for the next device info to stabilize last reboot reason
test eden.lim.test -test.v -timewait 10m -test.run TestInfo -out InfoContent.dinfo

-- check_vm_support.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

:>.env
while true;
do
    virt=$($EDEN info --out InfoContent.dinfo.Capabilities.HWAssistedVirtualization | tail -n 1)
    if [ -z "$virt" ]; then
        sleep 3
        continue
    fi
    [ "$virt" == "true" ] && echo "with_hw_virt=true" >>.env
    break
done

-- wait_and_get_ifconfig.sh --
APP=$1
PORT=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

address=http://${HOST}:${PORT}/ifconfig.html
until curl -m 10 $address | grep -q LOOPBACK; do sleep 3; done
curl -m 10 $address

-- wait_ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

for p in $*
do
  for i in `seq 20`
  do
    sleep 20
    # Test SSH-access to container
    echo {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue
    {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue && break
  done
done

-- wait_for_uplink_ip.sh --
UPLINK=$1
UPLINK_ENV=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

function get_ip {
    IP=$($EDEN eve ssh ifconfig 2>/dev/null | grep "^${UPLINK} " -A 1 | awk '/inet / {print $2}' | cut -d":" -f2)
    if [ ! -z "$IP" ]; then
        echo "IP address of $UPLINK is: $IP"
        echo "${UPLINK_ENV}_ip=$IP" >.env
        return 0
    fi
    return 1
}

until get_ip; do sleep 3; done

-- wait_for_app_ip.sh --
APP=$1
PORT=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

function get_ip {
    ifconfig=$({{template "ssh"}}$HOST -p $PORT ifconfig 2>/dev/null) || return 1
    if [ -z "$ifconfig" ]; then
        return 1
    fi
    interfaces=$(echo "$ifconfig" | grep "^\w" | grep -iv LOOPBACK | cut -d' ' -f1 | cut -d':' -f 1)
    eth1=$(echo "$interfaces" | awk 'NR==2')
    IP=$(echo "$ifconfig" | grep "^${eth1}" -A 1 | grep 'inet ' | sed 's/addr://' | awk '/inet / {print $2}')
    if [ ! -z "$IP" ]; then
        echo "IP address of $APP is: $IP"
        echo "${APP}_ip=$IP" >.env
        return 0
    fi
    return 1
}

until get_ip; do sleep 3; done

-- ping_from_app_to_uplink.sh --
APP_PORT=$1
UPLINK_IP=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

{{template "ssh"}}$HOST -p $APP_PORT ping -c 5 $UPLINK_IP

-- eden-config.yml --
{{/* Test's config file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}

-- devmodel.json --
{
  "ioMemberList": [
    {
      "ztype": 1,
      "phylabel": "eth0",
      "phyaddrs": {
        "Ifname": "eth0"
      },
      "logicallabel": "eth0",
      "assigngrp": "eth0",
      "usage": 1,
      "usagePolicy": {
        "freeUplink": true
      }
    },
    {
      "ztype": 1,
      "phylabel": "eth1",
      "phyaddrs": {
        "Ifname": "eth1"
      },
      "logicallabel": "eth1",
      "assigngrp": "eth1",
      "usage": 2,
      "usagePolicy": {
        "freeUplink": true
      }
    },
    {
      "ztype": 1,
      "phylabel": "eth2",
      "phyaddrs": {
        "Ifname": "eth2"
      },
      "logicallabel": "loop1-local",
      "assigngrp": "eth2",
      "usage": 2,
      "usagePolicy": {
        "freeUplink": true
      }
    },
    {
      "ztype": 1,
      "phylabel": "eth3",
      "phyaddrs": {
        "Ifname": "eth3"
      },
      "logicallabel": "loop1-switch",
      "assigngrp": "eth3",
      "usage": 2,
      "usagePolicy": {
        "freeUplink": true
      }
    },
    {
      "ztype": 1,
      "phylabel": "eth4",
      "phyaddrs": {
        "Ifname": "eth4"
      },
      "logicallabel": "loop2-local",
      "assigngrp": "eth4",
      "usage": 2,
      "usagePolicy": {
        "freeUplink": true
      }
    },
    {
      "ztype": 1,
      "phylabel": "eth5",
      "phyaddrs": {
        "Ifname": "eth5"
      },
      "logicallabel": "loop2-switch",
      "assigngrp": "eth5",
      "usage": 2,
      "usagePolicy": {
        "freeUplink": true
      }
    }
  ],
  "bondAdapters": [
    {
      "logicallabel": "bond-local",
      "interface_name": "bond1",
      "lower_layer_names": ["loop1-local", "loop2-local"],
      "bond_mode": 1
    },
    {
      "logicallabel": "bond-switch",
      "interface_name": "bond2",
      "lower_layer_names": ["loop1-switch", "loop2-switch"],
      "bond_mode": 1
    }
  ],
  "vlanAdapters": [
    {
      "logicallabel": "vlan100",
      "interface_name": "bond1.100",
      "lower_layer_name": "bond-local",
      "vlan_id": 100
    },
    {
      "logicallabel": "vlan200",
      "interface_name": "bond1.200",
      "lower_layer_name": "bond-local",
      "vlan_id": 200
    }
  ],
  "networks": [
    {
      "id": "6605d17b-3273-4108-8e6e-4965441ebe01",
      "type": 4,
      "ip": {
        "dhcp": 4
      }
    },
    {
      "id": "6605d17b-3273-4108-8e6e-4965441ebe02",
      "type": 4,
      "ip": {
        "dhcp": 4
      }
    },
    {
      "id": "6605d17b-3273-4108-8e6e-4965441ebe03",
      "type": 4,
      "ip": {
        "dhcp": 4
      }
    },
    {
      "id": "6605d17b-3273-4108-8e6e-4965441ebe04",
      "type": 4,
      "ip": {
        "dhcp": 4
      }
    },
    {
      "id": "6605d17b-3273-4108-8e6e-4965441ebe05",
      "type": 4,
      "ip": {
        "dhcp": 2
      }
    }
  ],
  "systemAdapterList": [
    {
      "name": "eth0",
      "uplink": true,
      "networkUUID": "6605d17b-3273-4108-8e6e-4965441ebe01"
    },
    {
      "name": "eth1",
      "uplink": true,
      "networkUUID": "6605d17b-3273-4108-8e6e-4965441ebe02"
    },
    {
      "name": "vlan100",
      "networkUUID": "6605d17b-3273-4108-8e6e-4965441ebe03"
    },
    {
      "name": "vlan200",
      "networkUUID": "6605d17b-3273-4108-8e6e-4965441ebe04"
    },
    {
      "name": "bond-switch",
      "networkUUID": "6605d17b-3273-4108-8e6e-4965441ebe05"
    }
  ]
}