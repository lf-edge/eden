[!exec:bash] stop
[!exec:grep] stop
[!exec:sleep] stop

# This test deploys FIO util into EVE, performs the test, and push the results on GitHub.

{{$volume_type := EdenGetEnv "VOLUME_TYPE"}}

# Deploy the application
eden pod deploy --volume-type={{if $volume_type}}{{$volume_type}}{{else}}qcow2{{end}} --metadata='EVE_VERSION={{EdenConfig "eve.tag"}}\nGIT_BRANCH={{EdenGetEnv "GIT_BRANCH"}}\nGIT_REPO={{EdenGetEnv "GIT_REPO"}}\nGIT_FOLDER={{EdenGetEnv "GIT_FOLDER"}}\nGIT_PATH={{EdenGetEnv "GIT_PATH"}}\nGIT_LOGIN={{EdenGetEnv "GIT_LOGIN"}}\nGIT_TOKEN={{EdenGetEnv "GIT_TOKEN"}}\nFIO_TIME={{EdenGetEnv "FIO_TIME"}}\nFIO_OPTYPE={{EdenGetEnv "FIO_OPTYPE"}}\nFIO_BS={{EdenGetEnv "FIO_BS"}}\nFIO_JOBS={{EdenGetEnv "FIO_JOBS"}}\nFIO_DEPTH={{EdenGetEnv "FIO_DEPTH"}}' --name=fio_test --memory=2GB --cpus=2 docker://itmoeve/fio_tests:v.1.2.1

test eden.app.test -test.v -timewait 5m RUNNING fio_test

# Wait 5 min for loading of app
exec sleep 5m

# Wait results
exec -t 50m bash wait_app.sh

# Teardown applications
eden pod delete fio_test

test eden.app.test -test.v -timewait 5m - fio_test

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}

-- wait_app.sh --
#!/bin/sh
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

echo "Waiting for the test results"
until "$EDEN" pod logs --fields=app --format=json fio_test | grep 'FIO tests are end'; do sleep 30; done

if "$EDEN" pod logs --fields=app --format=json fio_test | grep 'not found in upstream origin'; then echo "Test finished is fail"; else echo "Test finished is success"; fi
