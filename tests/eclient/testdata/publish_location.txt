# Test publishing of device location information.
# Note that this test does not cover extraction of the location information.
# This would be done by the wwan microservice using a GNSS receiver integrated with
# an LTE modem. Here we instead inject a fake location information and make it look
# like it was extracted by the wwan microservice. Then we test if this location data
# are properly published to applications, local profile server and to the controller.

{{define "mngr_port"}}8027{{end}}
{{define "app_port"}}8028{{end}}
{{define "token"}}server_token_123{{end}}
{{define "location_file"}}/mnt/location.json{{end}}
{{define "network"}}n1{{end}}
{{define "ssh"}}ssh -q -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop
[!exec:jq] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait 100m -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

# Create n1 network
eden -t 1m network create 10.11.12.0/24 -n {{template "network"}}
test eden.network.test -test.v -timewait 10m ACTIVATED {{template "network"}}

# Deploy local-manager
eden pod deploy -n local-manager --memory=512MB docker://lfedge/eden-eclient:a8b6f1a -p {{template "mngr_port"}}:22 --networks={{template "network"}}
test eden.app.test -test.v -timewait 10m RUNNING local-manager

# Wait for ssh access
exec -t 5m bash wait-ssh.sh {{template "mngr_port"}}

# Start local manager application
exec -t 1m bash local-manager-start.sh

# Obtain local-manager IP address
exec -t 2m bash get-app-ip.sh local-manager
source .env

# Configure local server
eden controller edge-node update --device profile_server_token={{template "token"}}
eden controller edge-node update --device local_profile_server=$app_ip:8888

# Deploy (ordinary) application
eden pod deploy -n app --memory=512MB docker://lfedge/eden-eclient:a8b6f1a -p {{template "app_port"}}:22 --networks={{template "network"}}
test eden.app.test -test.v -timewait 10m RUNNING app

# Wait for ssh access
exec -t 5m bash wait-ssh.sh {{template "app_port"}}

# Inject fake location information
exec -t 1m bash inject-fake-location.sh 57.928721 -5.197889 120.542 1650531954000

# Local profile server should obtain the location information
exec -t 1m bash wait-for-location-lps.sh '"2022-04-21T09:05:54Z"'
stdout '"logicallabel":.*"wwan0"'
stdout '"latitude":.*57.928721'
stdout '"longitude":.*-5.197889'
stdout '"altitude":.*120.542'
stdout '"horizontalUncertainty":.*16'
stdout '"verticalUncertainty":.*25.1'
stdout '"horizontalReliability":.*"LOC_RELIABILITY_MEDIUM"'
stdout '"verticalReliability":.*"LOC_RELIABILITY_LOW"'

# App should be able to obtain the location information
exec -t 1m bash wait-for-location-app.sh 1650531954000
stdout '"logical-label":.*"wwan0"'
stdout '"latitude":.*57.928721'
stdout '"longitude":.*-5.197889'
stdout '"altitude":.*120.542'
stdout '"horizontal-uncertainty":.*16'
stdout '"vertical-uncertainty":.*25.1'
stdout '"horizontal-reliability":.*"medium"'
stdout '"vertical-reliability":.*"low"'

# Controller should be able to obtain the location information
# Note: expected timestamp is in seconds in this case
exec -t 6m bash wait-for-location-controller.sh 1650531954
stdout 'logicallabel:.*wwan0'
stdout 'latitude:.*57.928721'
stdout 'longitude:.*-5.197889'
stdout 'altitude:.*120.542'
stdout 'horizontal_reliability:.*LOC_RELIABILITY_MEDIUM'
stdout 'vertical_reliability:.*LOC_RELIABILITY_LOW'
stdout 'horizontal_uncertainty:.*16'
stdout 'vertical_uncertainty:.*25.1'

# Check location update.
exec sleep 30
exec -t 1m bash inject-fake-location.sh 65.0931802 28.9032144 52.142 1650531987000
exec -t 1m bash wait-for-location-lps.sh '"2022-04-21T09:06:27Z"'
stdout '"logicallabel":.*"wwan0"'
stdout '"latitude":.*65.0931802'
stdout '"longitude":.*28.9032144'
stdout '"altitude":.*52.142'
exec -t 1m bash wait-for-location-app.sh 1650531987000
stdout '"logical-label":.*"wwan0"'
stdout '"latitude":.*65.0931802'
stdout '"longitude":.*28.9032144'
stdout '"altitude":.*52.142'
exec -t 6m bash wait-for-location-controller.sh 1650531987
stdout 'logicallabel:.*wwan0'
stdout 'latitude:.*65.0931802'
stdout 'longitude:.*28.9032144'
stdout 'altitude:.*52.142'

# Undeploy applications
eden pod delete local-manager
eden pod delete app
test eden.app.test -test.v -timewait 15m - local-manager
test eden.app.test -test.v -timewait 15m - app
eden network delete {{template "network"}}
test eden.network.test -test.v -timewait 10m - {{template "network"}}

-- wait-ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
for p in $*
do
  for i in `seq 20`
  do
    sleep 20
    # Test SSH-access to container
    echo {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue
    {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue && break
  done
done

-- local-manager-start.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
ARGS="--token={{template "token"}}"
{{template "ssh"}}$HOST -p {{template "mngr_port"}} "/root/local_manager $ARGS &>/dev/null &"

-- get-app-ip.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
IP=$($EDEN pod ps | grep $1 | awk '{print $4}' | cut -d ":" -f 1)
echo app_ip=$IP>>.env

-- inject-fake-location.sh --
LAT="$1"
LONG="$2"
ALT="$3"
TIME="$4"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
CONFIG="{
  \"logical-label\": \"wwan0\",
  \"latitude\": $LAT,
  \"longitude\": $LONG,
  \"altitude\": $ALT,
  \"utc-timestamp\": $TIME,
  \"horizontal-uncertainty\": 16.00,
  \"vertical-uncertainty\": 25.10,
  \"horizontal-reliability\": \"medium\",
  \"vertical-reliability\": \"low\"}"
echo "$CONFIG" | $EDEN eve ssh 'cat > /run/wwan/location.json'

-- wait-for-location-lps.sh --
EXPTIME="$1"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

# Wait until Local Profile server receives it.
while true; do
  LOCATION="$({{template "ssh"}}$HOST -p {{template "mngr_port"}} "cat {{template "location_file"}}")"
  TIMESTAMP="$(echo "$LOCATION" | jq '."utcTimestamp"')"
  if [ "$TIMESTAMP" = "$EXPTIME" ]; then
    echo "$LOCATION"
    break
  fi
  sleep 1
done

-- wait-for-location-app.sh --
EXPTIME="$1"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

# Wait until app is able to receive it.
while true; do
  LOCATION="$({{template "ssh"}}$HOST -p {{template "app_port"}} "curl -s 169.254.169.254/eve/v1/location.json")"
  TIMESTAMP="$(echo "$LOCATION" | jq '."utc-timestamp"')"
  if [ "$TIMESTAMP" = "$EXPTIME" ]; then
    echo "$LOCATION" | jq
    break
  fi
  sleep 1
done

-- wait-for-location-controller.sh --
EXPTIME="$1"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

while true;
do
    LOCATION=$($EDEN info InfoContent.locinfo.UtcTimestamp.Seconds:$EXPTIME --tail 1 --out InfoContent)
    if [ -n "$LOCATION" ]; then
        echo "$LOCATION"
        break
    fi
    sleep 3
done

