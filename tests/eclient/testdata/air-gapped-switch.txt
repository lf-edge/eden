# Test air-gapped-switch is verifying that we can use a switch network instance without uplink and communicates through it between apps.

{{define "port1"}}2223{{end}}
{{define "mac1"}}00:01:02:03:04:01{{end}}
{{define "ip1"}}11.12.13.11{{end}}
{{define "port2"}}2224{{end}}
{{define "mac2"}}00:01:02:03:04:02{{end}}
{{define "ip2"}}11.12.13.12{{end}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with 1 reboot limit
! test eden.reboot.test -test.v -timewait=0 -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

message 'Creating networks: local indirect and air-gapped switch direct'
eden network create 10.11.12.0/24 -n indirect
eden network create --type switch --uplink none -n direct

test eden.network.test -test.v -timewait 10m ACTIVATED indirect direct

message 'Starting applications'
eden pod deploy -v debug -n eclient1 docker://lfedge/eden-eclient:83cfe07 -p {{template "port1"}}:22 --networks=indirect --networks=direct:{{template "mac1"}} --memory=512MB
eden pod deploy -v debug -n eclient2 docker://lfedge/eden-eclient:83cfe07 -p {{template "port2"}}:22 --networks=indirect --networks=direct:{{template "mac2"}} --memory=512MB

message 'Waiting for running state'
test eden.app.test -test.v -timewait 20m RUNNING eclient1 eclient2

message 'Checking accessibility'
exec -t 5m bash wait_ssh.sh {{template "port1"}} {{template "port2"}}

message 'Assign address to eth1 and check mac for eclient1'
exec -t 1m bash prepare1.sh
stdout '{{template "mac1"}}'

message 'Assign address to eth1 and check mac for eclient2'
exec -t 1m bash prepare2.sh
stdout '{{template "mac2"}}'

message 'Testing of ping through switch'
exec -t 1m bash ping.sh
stdout '0% packet loss'

eden pod delete eclient1
eden pod delete eclient2

test eden.app.test -test.v -timewait 10m - eclient1 eclient2

eden network delete direct
eden network delete indirect

test eden.network.test -test.v -timewait 10m - direct indirect

stdout 'no network with direct found'
stdout 'no network with indirect found'

eden network ls
! stdout '^direct\s'
! stdout '^indirect\s'

-- wait_ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
for p in $*
do
  for i in `seq 20`
  do
    # Test SSH-access to container
    echo {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue
    {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue && break
    sleep 10
  done
done

-- prepare1.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}}$HOST -p {{template "port1"}} ip a add {{template "ip1"}}/24 dev eth1
{{template "ssh"}}$HOST -p {{template "port1"}} ip a add {{template "ip1"}}/24 dev eth1

echo {{template "ssh"}}$HOST -p {{template "port1"}} ip a
{{template "ssh"}}$HOST -p {{template "port1"}} ip a

-- prepare2.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}}$HOST -p {{template "port2"}} ip a add {{template "ip2"}}/24 dev eth1
{{template "ssh"}}$HOST -p {{template "port2"}} ip a add {{template "ip2"}}/24 dev eth1

echo {{template "ssh"}}$HOST -p {{template "port2"}} ip a
{{template "ssh"}}$HOST -p {{template "port2"}} ip a


-- ping.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}}$HOST -p {{template "port1"}} ping -I eth1 -c 10 {{template "ip2"}}
{{template "ssh"}}$HOST -p {{template "port1"}} ping -I eth1 -c 10 {{template "ip2"}}

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
