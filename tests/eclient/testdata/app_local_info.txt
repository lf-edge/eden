# Test app local info

{{define "mngr_port"}}8027{{end}}
{{define "app_port"}}8028{{end}}
{{define "token"}}server_token_123{{end}}
{{define "app_info_status_file"}}/mnt/app-info-status.json{{end}}
{{define "app_cmd_file"}}/mnt/app-command.json{{end}}
{{define "network"}}n1{{end}}
{{define "ssh"}}ssh -q -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@FWD_IP -p FWD_PORT{{end}}
{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop
[!exec:jq] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait 100m -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

# Create n1 network
eden -t 1m network create 10.11.12.0/24 -n {{template "network"}}
test eden.network.test -test.v -timewait 10m ACTIVATED {{template "network"}}

# Deploy local-manager
eden pod deploy -n local-manager --memory=512MB {{template "eclient_image"}} -p {{template "mngr_port"}}:22 --networks={{template "network"}}
test eden.app.test -test.v -timewait 10m RUNNING local-manager

# Wait for ssh access
exec -t 5m bash wait-ssh.sh {{template "mngr_port"}}

# Start local manager application
exec -t 1m bash local-manager-start.sh

# Obtain local-manager IP address
exec -t 2m bash get-app-ip.sh local-manager
source .env

# Configure local server
eden controller edge-node update --device profile_server_token={{template "token"}}
eden controller edge-node update --device local_profile_server=$app_ip:8888

# STEP 1: Wait for appinfo status
exec sleep 30
exec -t 1m bash get-appinfo-status.sh
stdout 'local-manager'
! stdout 'app1'
! stderr .

# STEP 2: Deploy the second app
eden pod deploy -n app1 --memory=512MB {{template "eclient_image"}} -p {{template "app_port"}}:22 --networks={{template "network"}}
test eden.app.test -test.v -timewait 10m RUNNING app1

# Wait for ssh access
exec -t 5m bash wait-ssh.sh {{template "app_port"}}

# STEP 3: Wait for new appinfo status
exec sleep 30
exec -t 1m bash get-appinfo-status.sh
stdout 'local-manager'
stdout 'app1'
! stderr .

# STEP 4: Request for the app1 to be purged
exec -t 1m bash create-file-in-app1.sh /root/purge_test
exec -t 1m bash get-appinfo-status.sh app1
! stdout 'lastCmdTimestamp'
! stderr .
exec -t 1m bash put-appinfo-cmd.sh app1 123 COMMAND_PURGE &
exec -t 5m bash wait-for-app-state.sh app1 "PURGING|HALTING"
exec -t 5m bash wait-for-app-state.sh app1 RUNNING
exec -t 5m bash wait-for-volume.sh app1
stdout DELIVERED
! stderr .
# Internally, EVE increases generationCount to trigger the purge,
# but this is fully hidden from the controller.
eden info --tail 1 InfoContent.vinfo.displayName:app1 --out InfoContent.vinfo.generationCount
stdout 0
exec -t 1m bash get-appinfo-status.sh app1
stdout '"lastCmdTimestamp": "123"'
! stderr .
exec -t 5m bash wait-ssh.sh {{template "app_port"}}
! exec -t 1m bash file-exists-in-app1.sh /root/purge_test

# STEP 5: Test that purge via controller also works.
# Note that eve sums local and remote purge counters.
exec -t 1m bash create-file-in-app1.sh /root/purge_test
eden pod purge app1
exec -t 5m bash wait-for-app-state.sh app1 "PURGING|HALTING"
exec -t 5m bash wait-for-app-state.sh app1 RUNNING
exec -t 5m bash wait-for-volume.sh app1
stdout DELIVERED
! stderr .
eden info --tail 1 InfoContent.vinfo.displayName:app1 --out InfoContent.vinfo.generationCount
stdout 0
exec -t 1m bash get-appinfo-status.sh app1
stdout '"lastCmdTimestamp": "123"'
! stderr .
exec -t 5m bash wait-ssh.sh {{template "app_port"}}
! exec -t 1m bash file-exists-in-app1.sh /root/purge_test

# STEP 6: Request for the app1 to be restarted
exec -t 1m bash create-file-in-app1.sh /run/restart_test
exec -t 1m bash create-file-in-app1.sh /root/purge_test
exec -t 1m bash put-appinfo-cmd.sh app1 456 COMMAND_RESTART &
exec -t 5m bash wait-for-app-state.sh app1 "RESTARTING|HALTING"
exec -t 5m bash wait-for-app-state.sh app1 RUNNING
exec -t 1m bash get-appinfo-status.sh app1
stdout '"lastCmdTimestamp": "456"'
! stderr .
exec -t 5m bash wait-ssh.sh {{template "app_port"}}
! exec -t 1m bash file-exists-in-app1.sh /run/restart_test
exec -t 1m bash file-exists-in-app1.sh /root/purge_test

# STEP 7: Test that restart via controller also works.
# Note that eve sums local and remote restart counters.
exec -t 1m bash create-file-in-app1.sh /run/restart_test
exec -t 1m bash create-file-in-app1.sh /root/purge_test
eden pod restart app1
exec -t 5m bash wait-for-app-state.sh app1 "RESTARTING|HALTING"
exec -t 5m bash wait-for-app-state.sh app1 RUNNING
exec -t 1m bash get-appinfo-status.sh app1
stdout '"lastCmdTimestamp": "456"'
! stderr .
exec -t 5m bash wait-ssh.sh {{template "app_port"}}
! exec -t 1m bash file-exists-in-app1.sh /run/restart_test
exec -t 1m bash file-exists-in-app1.sh /root/purge_test

# STEP 8: Remove the second app
eden pod delete app1
test eden.app.test -test.v -timewait 15m - app1

# STEP 9: Wait for new appinfo status
exec sleep 30
exec -t 1m bash get-appinfo-status.sh
stdout 'local-manager'
! stdout 'app1'
! stderr .

# STEP 10: Undeploy local-manager
eden pod delete local-manager
test eden.app.test -test.v -timewait 15m - local-manager
eden network delete {{template "network"}}
test eden.network.test -test.v -timewait 10m - {{template "network"}}

-- wait-ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
for p in $*
do
  for i in `seq 20`
  do
    sleep 20
    # Test SSH-access to container
    echo $EDEN sdn fwd eth0 $p -- {{template "ssh"}} grep -q Ubuntu /etc/issue
    $EDEN sdn fwd eth0 $p -- {{template "ssh"}} grep -q Ubuntu /etc/issue && break
  done
done

-- local-manager-start.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
ARGS="--token={{template "token"}}"
$EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "/root/local_manager $ARGS &>/proc/1/fd/1 &"

-- get-app-ip.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
IP=$($EDEN pod ps | grep $1 | awk '{print $4}' | cut -d ":" -f 1)
echo app_ip=$IP>>.env

-- get-appinfo-status.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
APP="$1"
CMDS="
until test -f {{template "app_info_status_file"}}; do sleep 5; done
sleep 2
cat {{template "app_info_status_file"}}
"

OUTPUT="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "$CMDS")"
if [ -n "$APP" ]; then
    echo "$OUTPUT" | jq --arg APP "$APP" '.appsInfo[] | select(.name==$APP)'
else
    echo "$OUTPUT"
fi

-- put-appinfo-cmd.sh --
DN="$1"
TIMESTAMP="${2:-0}"
CMD="${3:-COMMAND_UNSPECIFIED}"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
CONFIG="{\"displayname\": \"$DN\", \"timestamp\": $TIMESTAMP, \"command\": \"$CMD\"}"

while true; do
    echo "$CONFIG" | $EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} 'cat > {{template "app_cmd_file"}}'
    APP_CMD_FILE_CONTENT="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "cat {{template "app_cmd_file"}}")"
    echo "$APP_CMD_FILE_CONTENT" | grep "$CMD" && break
    sleep 1
done

-- wait-for-app-state.sh --
APP="${1}"
EXPSTATE="${2}"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

while true; do
    APPINFO="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "cat {{template "app_info_status_file"}}")"
    APPINFO="$(echo "$APPINFO" | jq --arg APP "$APP" '.appsInfo[] | select(.name==$APP)')"
    echo "$APPINFO" | grep -E "$EXPSTATE" && break
    sleep 1
done

-- create-file-in-app1.sh --
FILEPATH="${1}"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

$EDEN sdn fwd eth0 {{template "app_port"}} -- {{template "ssh"}} "touch \"$FILEPATH\""

-- file-exists-in-app1.sh --
FILEPATH="${1}"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

$EDEN sdn fwd eth0 {{template "app_port"}} -- {{template "ssh"}} "test -f \"$FILEPATH\""

-- wait-for-volume.sh --
APP="${1}"
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

for i in `seq 30`
do
    echo Step $i volume ls
    $EDEN volume ls | grep "${APP}" | grep DELIVERED && break
    sleep 10
done

$EDEN volume ls | grep "${APP}"

-- eden-config.yml --
{{/* Test's config file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
