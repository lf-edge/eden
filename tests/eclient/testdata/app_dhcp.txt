# Test verifies if EVE is able to learn IP addresses allocated by DHCP
# to applications connected via switch network instances. These IP address
# allocations are then published inside the network info messages.
# Note that the learning is based on packet sniffing of DHCP messages going
# through the bridge of the switch network.

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop

# The application providing DHCP services requires netadmin capabilities.
# For security reasons, EVE does not allow to grant these capabilities to native
# containers, therefore it is required to deploy apps as VMs-in-Containers for
# this test to pass.
exec -t 2m bash check_vm_support.sh
source .env
[!env:with_hw_virt] skip 'Missing HW-assisted virtualization capability'

{{define "port"}}2223{{end}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@FWD_IP -p FWD_PORT{{end}}
{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait=0 -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

message 'Creating networks'
eden network create 10.11.12.0/24 -n nat
eden network create --type switch --uplink none -n switch
test eden.network.test -test.v -timewait 10m ACTIVATED nat switch

message 'Starting applications'
eden pod deploy -v debug -n dhcp-server --memory=512MB --networks=switch --mount=src={{EdenConfig "eden.tests"}}/eclient/testdata/dhcp-server,dst=/app docker://lfedge/eden-docker-test:83cfe07
eden pod deploy -v debug -n eclient --memory=512MB --networks=nat --networks=switch -p {{template "port"}}:22 {{template "eclient_image"}}
test eden.app.test -test.v -timewait 20m RUNNING dhcp-server eclient

message 'Checking accessibility'
exec -t 5m bash wait_ssh.sh

message 'Waiting for IP allocation'
exec -t 5m bash wait_for_app_ip.sh eclient
grep 'eclient_ip=10.11.13.\d+' .env
source .env

message 'Waiting for EVE to publish IP assignment'
exec -t 2m bash wait_for_ip_assignment.sh $eclient_mac $eclient_ip
! stderr .

# We had a bug that DHCPACK returned for DHCPINFORM would result
# in EVE replacing the recorded IP address with unspecified IP 0.0.0.0.
# This is because RFC2131 states (in section 4.3.5) that yiaddr inside
# DHCPACK should be empty in this case and EVE uses this field to learn
# IP assignments.
exec -t 2m bash send_dhcpinform.sh $eclient_mac $eclient_ip
exec sleep 60
exec -t 2m bash wait_for_ip_assignment.sh $eclient_mac $eclient_ip
! stderr .

message 'Resource cleaning'
eden pod delete eclient
eden pod delete dhcp-server
test eden.app.test -test.v -timewait 10m - eclient dhcp-server

eden network delete switch
eden network delete nat
test eden.network.test -test.v -timewait 10m - switch nat
stdout 'no network with switch found'
stdout 'no network with nat found'
eden network ls
! stdout '^switch\s'
! stdout '^nat\s'

-- check_vm_support.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

:>.env
while true;
do
    virt=$($EDEN info --out InfoContent.dinfo.Capabilities.HWAssistedVirtualization | tail -n 1)
    if [ -z "$virt" ]; then
        sleep 3
        continue
    fi
    [ "$virt" == "true" ] && echo "with_hw_virt=true" >>.env
    break
done

-- wait_ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

for i in `seq 20`
do
  sleep 20
  # Test SSH-access to container
  echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} grep -q Ubuntu /etc/issue
  $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} grep -q Ubuntu /etc/issue && break
done

-- wait_for_app_ip.sh --
#!/bin/sh

APP=$1
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

function get_ip {
    ifconfig=$($EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} ifconfig 2>/dev/null) || return 1
    if [ -z "$ifconfig" ]; then
        return 1
    fi
    interfaces=$(echo "$ifconfig" | grep "^\w" | grep -iv LOOPBACK | cut -d' ' -f1 | cut -d':' -f1)
    eth1=$(echo "$interfaces" | awk 'NR==2')
    IP=$(echo "$ifconfig" | grep "^${eth1}" -A 1 | grep 'inet ' | sed 's/addr://' | awk '/inet / {print $2}')
    MAC=$(echo "$ifconfig" | grep "^${eth1}" -A 3 | sed 's/^.*HWaddr/ether/' | awk '/ether / {print $2}' | awk -F' ' '{print tolower($NF)}')
    if [ ! -z "$IP" ]; then
        echo "IP address of $APP is: $IP"
        echo "${APP}_ip=$IP" >.env
        echo "MAC address of $APP is: $MAC"
        echo "${APP}_mac=$MAC" >>.env
        return 0
    fi
    return 1
}

until get_ip; do sleep 3; done

-- wait_for_ip_assignment.sh --
#!/bin/sh

EXP_MAC=$1
EXP_IP=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

function get_ip_assignments {
    assignments=$($EDEN info InfoContent.niinfo.displayname:switch --tail 1 --out InfoContent.niinfo.ipAssignments)
    echo "Current IP assignments: $assignments"
    if echo "$assignments" | grep -q "macAddress:\"$EXP_MAC\" \+ipAddress:\"$EXP_IP\""; then
        return 0
    fi
    return 1
}

until get_ip_assignments; do sleep 3; done

-- send_dhcpinform.sh --
#!/bin/sh

CLIENT_MAC=$1
CLIENT_IP=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

$EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} dhcping -c $CLIENT_IP -h $CLIENT_MAC -s 10.11.13.1 -i -v

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
