# Test dev local info

{{define "mngr_port"}}8027{{end}}
{{define "app_port"}}8028{{end}}
{{define "token"}}server_token_123{{end}}
{{define "app_info_status_file"}}/mnt/app-info-status.json{{end}}
{{define "dev_info_status_file"}}/mnt/dev-info-status.json{{end}}
{{define "dev_cmd_file"}}/mnt/dev-command.json{{end}}
{{define "network"}}n1{{end}}
{{define "ssh"}}ssh -q -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@FWD_IP -p FWD_PORT{{end}}
{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop
[!exec:jq] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 3 reboot limit since we reboot twice
! test eden.reboot.test -test.v -timewait 100m -reboot=0 -count=3 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

# Create n1 network
eden -t 1m network create 10.11.12.0/24 -n {{template "network"}}
test eden.network.test -test.v -timewait 10m ACTIVATED {{template "network"}}

# Deploy local-manager
eden pod deploy -n local-manager --memory=512MB {{template "eclient_image"}} -p {{template "mngr_port"}}:22 --networks={{template "network"}}
test eden.app.test -test.v -timewait 15m RUNNING local-manager

# Wait for ssh access
exec -t 5m bash wait-ssh.sh {{template "mngr_port"}}

# Start local manager application
exec -t 1m bash local-manager-start.sh

# Obtain local-manager IP address
exec -t 2m bash get-app-ip.sh local-manager
source .env

# Configure local server
eden controller edge-node update --device profile_server_token={{template "token"}}
eden controller edge-node update --device local_profile_server=$app_ip:8888

# STEP 1: Wait for devinfo status
exec sleep 30
exec -t 10m bash get-devinfo-status.sh
! stderr .

# STEP 2: Deploy the second app
eden pod deploy -n app1 --memory=512MB {{template "eclient_image"}} -p {{template "app_port"}}:22 --networks={{template "network"}}
test eden.app.test -test.v -timewait 15m RUNNING app1

# Wait for ssh access
exec -t 5m bash wait-ssh.sh {{template "app_port"}}

# STEP 3: Wait for devinfo status reporting ONLINE
exec -t 10m bash wait-for-dev-state.sh ONLINE

# STEP 4: Request for shutdown. Check that app1 stops before local_manager
exec -t 15m bash wait-for-app-state.sh app1 HALTED &app1halted&
exec -t 1m bash put-devinfo-cmd.sh COMMAND_SHUTDOWN &
exec -t 5m bash wait-for-dev-state.sh SHUTTING_DOWN &
# Could it already have HALTED? Match HALTING or HALTED
exec -t 5m bash wait-for-app-state.sh app1 HALT
exec -t 2m bash wait-for-app-state.sh local-manager RUNNING &
wait app1halted

# Did local-manager halt? Can't check by asking local-manager
exec -t 1m bash eden-pod-ps.sh local-manager
! stdout 'RUNNING'
! stderr .

# STEP 5: test reboot via controller bringing them back up
# send reboot command without wait
eden controller edge-node reboot

# STEP 5.1: Wait for ssh access
test eden.app.test -test.v -timewait 20m RUNNING app1 local-manager
exec -t 10m bash wait-ssh.sh {{template "app_port"}}

# STEP 5.2: Start local manager application
exec -t 1m bash local-manager-start.sh

# STEP 5.3: Wait for devinfo status reporting ONLINE
exec sleep 30
exec -t 10m bash wait-for-dev-state.sh ONLINE

# STEP 5.4: Check apps are back
exec -t 20m bash wait-for-app-state.sh local-manager RUNNING
exec -t 20m bash wait-for-app-state.sh app1 RUNNING

# We can run the rest of the test only with qemu right now to properly
# handle start of EVE after poweroff.
{{$devmodel := EdenConfig "eve.devmodel"}}
{{if not (eq $devmodel "ZedVirtual-4G")}}
eden pod delete app1
eden pod delete local-manager
test eden.app.test -test.v -timewait 5m - app1 local-manager
eden network delete {{template "network"}}
test eden.network.test -test.v -timewait 5m - {{template "network"}}
eden eve reset
exec sleep 10
skip 'The rest of the test is supported only on QEMU'
{{end}}

# STEP 6: Request for poweroff. Check that app1 stops before local_manager
exec -t 1m bash put-devinfo-cmd.sh COMMAND_SHUTDOWN_POWEROFF &
exec -t 5m bash wait-for-dev-state.sh POWERING_OFF &
# Could it already have HALTED? Match HALTING or HALTED
exec -t 5m bash wait-for-app-state.sh app1 HALT
exec -t 2m bash wait-for-app-state.sh local-manager RUNNING &
exec -t 5m bash wait-for-app-state.sh app1 HALTED

# Did local-manager halt? Can't check by asking local-manager
exec -t 1m bash eden-pod-ps.sh local-manager
! stdout 'RUNNING'
! stderr .

# STEP 7: Check qemu process is gone aka powered off
exec -t 5m bash wait-for-eve-to-stop.sh

# STEP 8: Restart EVE; check apps come up
message 'Restart EVE'
# EVE VM is stopped but SDN VM (if used) is still running - stop it.
eden eve stop
exec sleep 10
eden eve start
exec sleep 30

# STEP 8.1: Wait for ssh access
test eden.app.test -test.v -timewait 20m RUNNING app1
exec -t 10m bash wait-ssh.sh {{template "app_port"}}

# STEP 9: Remove the second app
eden pod delete app1
test eden.app.test -test.v -timewait 15m - app1

# STEP 10: Undeploy local-manager
eden pod delete local-manager
test eden.app.test -test.v -timewait 15m - local-manager
eden network delete {{template "network"}}
test eden.network.test -test.v -timewait 10m - {{template "network"}}
eden eve reset
exec sleep 10

-- wait-ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
for p in $*
do
  for i in `seq 20`
  do
    sleep 30
    # Test SSH-access to container
    echo $EDEN sdn fwd eth0 $p -- {{template "ssh"}} grep -q Ubuntu /etc/issue
    $EDEN sdn fwd eth0 $p -- {{template "ssh"}} grep -q Ubuntu /etc/issue && break
  done
done

-- local-manager-start.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
ARGS="--token={{template "token"}}"
while true; do
    $EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "/root/local_manager $ARGS &>/proc/1/fd/1 &" && break
    sleep 5
done

-- get-app-ip.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
IP=$($EDEN pod ps | grep $1 | awk '{print $4}' | cut -d ":" -f 1)
echo app_ip=$IP>>.env

-- eden-pod-ps.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
line=$($EDEN pod ps | grep $1)
echo line

-- wait-for-app-state.sh --
APP="${1}"
EXPSTATE="${2}"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

while true; do
    APPINFO="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "cat {{template "app_info_status_file"}}")"
    APPINFO="$(echo "$APPINFO" | jq --arg APP "$APP" '.appsInfo[] | select(.name==$APP)')"
    echo "$APPINFO" | grep "$EXPSTATE" && break
    sleep 1
done

-- get-devinfo-status.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
CMDS="
until test -f {{template "dev_info_status_file"}}; do sleep 5; done
sleep 2
cat {{template "dev_info_status_file"}}
"

OUTPUT="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "$CMDS")"
echo "$OUTPUT"

OUTPUT="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "$CMDS")"
echo "$OUTPUT"

-- put-devinfo-cmd.sh --
CMD="${1:-COMMAND_UNSPECIFIED}"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
CONFIG="{\"command\": \"$CMD\"}"
echo "$CONFIG"

while true; do
    echo "$CONFIG" | $EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} 'cat > {{template "dev_cmd_file"}}'
    DEV_CMD_FILE_CONTENT="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "cat {{template "dev_cmd_file"}}")"
    echo "$DEV_CMD_FILE_CONTENT" | grep "$CMD" && break
    sleep 1
done

-- wait-for-dev-state.sh --
EXPSTATE="${1}"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

while true; do
    DEVINFO="$($EDEN sdn fwd eth0 {{template "mngr_port"}} -- {{template "ssh"}} "cat {{template "dev_info_status_file"}}")"
    echo "$DEVINFO" | grep "$EXPSTATE" && break
    sleep 1
done

-- wait-for-eve-to-stop.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

while true; do
    STATUS="$($EDEN eve status)"
    echo "$STATUS" | grep "EVE.*process not running" && break
    sleep 3
done

-- eden-config.yml --
{{/* Test's config file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
