# Test local manager and profiles

{{define "profile_server_token"}}server_token_123{{end}}
{{define "profile_server_file"}}/mnt/profile{{end}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@FWD_IP -p FWD_PORT{{end}}
{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait=0 -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

# Define local-manager and two apps in different profiles
# TBD: static ip in pod deploy
eden pod deploy -n local-manager --memory=512MB {{template "eclient_image"}} -p 2223:22

test eden.app.test -test.v -timewait 10m RUNNING local-manager

eden pod deploy -n app-profile-1 --memory=512MB {{template "eclient_image"}} --profile=profile-1
eden pod deploy -n app-profile-2 --memory=512MB {{template "eclient_image"}} --profile=profile-2
eden pod deploy -n app-profile-1-2 --memory=512MB {{template "eclient_image"}} --profile=profile-1 --profile=profile-2

# We have empty local_manager and empty default_profile, so apps should be in RUNNING state
test eden.app.test -test.v -timewait 20m RUNNING app-profile-1 app-profile-2 app-profile-1-2 local-manager

exec sleep 20

# STEP 1: global_profile=profile-1

eden controller edge-node update --device global_profile=profile-1

# We set default_profile to profile-1, so app-profile-2 should be in HALTED state
test eden.app.test -test.v -timewait 15m HALTED app-profile-2
test eden.app.test -test.v -timewait 15m RUNNING app-profile-1 app-profile-1-2 local-manager

exec sleep 20

# STEP 2: global_profile=profile-2
eden controller edge-node update --device global_profile=profile-2

# We set default_profile to profile-2, so app-profile-1 should be in HALTED state
test eden.app.test -test.v -timewait 15m HALTED app-profile-1
test eden.app.test -test.v -timewait 15m RUNNING app-profile-2 app-profile-1-2 local-manager

# STEP 3: global_profile=profile-3

eden controller edge-node update --device global_profile=profile-3

# We set default_profile to profile-3, so all apps against local-manager should be in HALTED state
test eden.app.test -test.v -timewait 15m HALTED app-profile-1 app-profile-2 app-profile-1-2
test eden.app.test -test.v -timewait 15m RUNNING local-manager

exec sleep 20

# STEP 4: stop app from controller with defined profile
eden pod stop local-manager
test eden.app.test -test.v -timewait 15m HALTED local-manager

eden pod start local-manager
test eden.app.test -test.v -timewait 15m RUNNING local-manager

# Wait for ssh access
exec -t 5m bash wait_ssh.sh 2223

# start local manager application
exec -t 1m bash local-manager-start.sh 2223

# TBD: obtain IP address
eden controller edge-node update --device profile_server_token={{template "profile_server_token"}}
eden controller edge-node update --device local_profile_server=10.11.12.2:8888

# STEP 5: overwrite with profile-1

# Start local-manager.sh and wait for curl to serve response for EVE
exec -t 1m bash local-manager-profile.sh 2223 profile-1

# We set local_manager and use profile-1 in it, so app-profile-2 should be in HALTED state
test eden.app.test -test.v -timewait 15m HALTED app-profile-2
test eden.app.test -test.v -timewait 15m RUNNING app-profile-1 app-profile-1-2 local-manager

exec sleep 20

# STEP 6: overwrite with profile-2

# Start local-manager.sh and wait for curl to serve response for EVE
exec -t 1m bash local-manager-profile.sh 2223 profile-2

# We set local_manager and use profile-2 in it, so app-profile-1 should be in HALTED state
test eden.app.test -test.v -timewait 15m HALTED app-profile-1
test eden.app.test -test.v -timewait 15m RUNNING app-profile-2 app-profile-1-2 local-manager

exec sleep 20

# STEP 7: overwrite with profile-3

# Start local-manager.sh and wait for curl to serve response for EVE
exec -t 1m bash local-manager-profile.sh 2223 profile-3

# We set local_manager and use profile-3 in it, so all apps against local-manager should be in HALTED state
test eden.app.test -test.v -timewait 15m HALTED app-profile-1 app-profile-2 app-profile-1-2
test eden.app.test -test.v -timewait 15m RUNNING local-manager

exec sleep 20

# STEP 8: return back to empty profiles

eden controller edge-node update --device global_profile=""
eden controller edge-node update --device local_profile_server=""

exec sleep 30
# We have empty local_manager and empty default_profile, so apps should come back to RUNNING state now
test eden.app.test -test.v -timewait 15m RUNNING app-profile-1 app-profile-2 app-profile-1-2 local-manager

exec sleep 20

eden pod delete app-profile-1
eden pod delete app-profile-2
eden pod delete app-profile-1-2
eden pod delete local-manager

test eden.app.test -test.v -timewait 15m - app-profile-1 app-profile-2 app-profile-1-2 local-manager

-- wait_ssh.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

for p in $*
do
  for i in `seq 20`
  do
    sleep 20
    # Test SSH-access to container
    echo $EDEN sdn fwd eth0 $p -- {{template "ssh"}} grep -q Ubuntu /etc/issue
    $EDEN sdn fwd eth0 $p -- {{template "ssh"}} grep -q Ubuntu /etc/issue && break
  done
done

-- local-manager-start.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
$EDEN sdn fwd eth0 $1 -- {{template "ssh"}} '/root/local_manager --token={{template "profile_server_token"}} --profile={{template "profile_server_file"}} &>/proc/1/fd/1 &'

-- local-manager-profile.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
$EDEN sdn fwd eth0 $1 -- {{template "ssh"}} "echo $2>{{template "profile_server_file"}}"

-- eden-config.yml --
{{/* Test's config file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
