# Test for internal TCP client/server interconnection

{{$test_msg := "This is a test"}}
{{define "port"}}2223{{end}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@FWD_IP -p FWD_PORT{{end}}
{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait=0 -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

message 'Creating networks'
eden network create 10.11.12.0/24 -n n1
eden network create 10.11.13.0/24 -n n2

test eden.network.test -test.v -timewait 10m ACTIVATED n1 n2

eden pod deploy -n eclient --memory=512MB {{template "eclient_image"}} --networks=n1 --networks=n2 -p {{template "port"}}:22

eden pod deploy -v warning -n eserver --memory=512MB --networks=n1 --networks=n2 {{template "eclient_image"}}

test eden.app.test -test.v -timewait 20m RUNNING eclient eserver

#exec -t 20m bash wait_ssh.sh
exec -t 20m bash wait_ssh.sh

eden pod ps
cp stdout pod_ps

# the first try with the first eserver ip
exec bash eserver_ip.sh 1
exec sleep 10
exec -t 1m bash setup_srv.sh
exec sleep 10
exec -t 1m bash run_srv.sh &
exec -t 1m bash run_client.sh
exec sleep 10
exec -t 1m bash get_result.sh
stdout '{{$test_msg}}'

# the second try with the second eserver ip
exec bash eserver_ip.sh 2
exec sleep 10
exec -t 1m bash setup_srv.sh
exec sleep 10
exec -t 1m bash run_srv.sh &
exec -t 1m bash run_client.sh
exec sleep 10
exec -t 1m bash get_result.sh
stdout '{{$test_msg}}'

eden pod delete eclient
eden pod delete eserver

test eden.app.test -test.v -timewait 10m - eclient eserver

eden network delete n1
eden network delete n2

test eden.network.test -test.v -timewait 10m - n1 n2

-- wait_ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
for i in `seq 20`
do
  sleep 20
  # Test SSH-access to container
  echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} grep -q Ubuntu /etc/issue
  $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} grep -q Ubuntu /etc/issue && break
done

-- eserver_ip.sh --
IP_NUM="$1"
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
echo export ESERVER_IP=$(grep '^eserver\s' pod_ps | cut -f 4|tr -d ' '|cut -d";" -f"$IP_NUM") > env

-- setup_srv.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
. ./env

echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} "echo ssh -o StrictHostKeyChecking=no root@$ESERVER_IP nc -l 1234 > /tmp/server"
$EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} "echo ssh -o StrictHostKeyChecking=no root@$ESERVER_IP nc -l 1234 > /tmp/server"

-- run_srv.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
. ./env

echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} 'sh /tmp/server > /tmp/out'
$EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} 'sh /tmp/server > /tmp/out'

-- run_client.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
. ./env

function check_server_port {
    # get to server app via client app
    listeners=$($EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} ssh -o StrictHostKeyChecking=no root@$ESERVER_IP netstat -tlpn)
    echo "Current listeners: $listeners"
    if echo "$listeners" | grep -q ":1234"; then
        return 0
    fi
    return 1
}

until check_server_port; do sleep 3; done

echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} "echo {{$test_msg}} | nc -N $ESERVER_IP 1234"
$EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} "echo {{$test_msg}} | nc -N $ESERVER_IP 1234"

-- get_result.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
. ./env

echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} 'cat /tmp/out && rm /tmp/out'
$EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} 'cat /tmp/out && rm /tmp/out'

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
