# Test app_nonat is verifying that we can use a switch network instance on a management port.

{{define "port"}}2223{{end}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@FWD_IP -p FWD_PORT{{end}}
{{define "eclient_image"}}docker://{{EdenConfig "eden.eclient.image"}}:{{EdenConfig "eden.eclient.tag"}}{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop

# Changing Reverse-Path filtering to the Loose mode requires privileges which native
# containers do not have.
exec -t 2m bash check_vm_support.sh
source .env
[!env:with_hw_virt] skip 'Missing HW-assisted virtualization capability'

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with 1 reboot limit
! test eden.reboot.test -test.v -timewait=0 -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

message 'Creating networks'
eden network create 10.11.12.0/24 -n indirect
eden network create --type switch --uplink eth0 -n direct

test eden.network.test -test.v -timewait 10m ACTIVATED indirect direct

message 'Starting applications'
eden pod deploy -v debug -n eclient {{template "eclient_image"}} -p {{template "port"}}:22 --networks=indirect --networks=direct --memory=512MB

message 'Waiting of running'
test eden.app.test -test.v -timewait 30m RUNNING eclient

message 'Checking accessibility'
exec -t 5m bash wait_ssh.sh

message 'Testing of network'
exec sleep 20
exec -t 1m bash ping.sh
stdout '0% packet loss'

message 'Removing ACLs from "direct" network'
eden pod modify eclient --networks indirect --networks=direct --acl='direct:'
test eden.app.test -test.v -timewait 30m RUNNING eclient

message 'Checking accessibility'
exec -t 5m bash wait_ssh.sh

! exec -t 1m bash ping.sh
stdout '100% packet loss'

message 'Resource cleaning'
eden pod delete eclient

test eden.app.test -test.v -timewait 10m - eclient

eden network delete direct
eden network delete indirect

test eden.network.test -test.v -timewait 10m - direct indirect

stdout 'no network with direct found'
stdout 'no network with indirect found'

eden network ls
! stdout '^direct\s'
! stdout '^indirect\s'

-- check_vm_support.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

:>.env
while true;
do
    virt=$($EDEN info --out InfoContent.dinfo.Capabilities.HWAssistedVirtualization | tail -n 1)
    if [ -z "$virt" ]; then
        sleep 3
        continue
    fi
    [ "$virt" == "true" ] && echo "with_hw_virt=true" >>.env
    break
done

-- wait_ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

for i in `seq 20`
do
  sleep 20
  # Test SSH-access to container
  echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} grep -q Ubuntu /etc/issue
  $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} grep -q Ubuntu /etc/issue && break
done

-- ping.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} sysctl net.ipv4.conf.eth1.rp_filter=2
$EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} sysctl net.ipv4.conf.eth1.rp_filter=2
echo $EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} ping -I eth1 -c 10 www.google.com
$EDEN sdn fwd eth0 {{template "port"}} -- {{template "ssh"}} ping -I eth1 -c 10 www.google.com

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
