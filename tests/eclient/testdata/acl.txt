# Test particular host access

{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@{{end}}

# source for very long domains: https://longest.domains/
{{$long_domain := "theofficialabsolutelongestdomainnameregisteredontheworldwideweb.international"}}

# non-existent domain statically assigned to an (existing public) IP address through a host file
{{$fake_domain := "this-fake-domain-is-associated-with-zededa.com"}}

{{$network_name := "n1"}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait 40m -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 20

# use zededa.com IP address as a target for $fake_domain
exec -t 10m bash dns_lookup.sh zededa.com
# read the result of dns lookup (host_ip variable)
source .env

# Create network for which ACLs will be defined.
eden network create 10.11.12.0/24 -n {{$network_name}} -s {{$fake_domain}}:$host_ip
test eden.network.test -test.v -timewait 10m ACTIVATED {{$network_name}}

# First app is only allowed to access github.com and $long_domain.
eden pod deploy -n curl-acl1 --memory=512MB docker://itmoeve/eclient:0.4 -p 2223:22 --networks={{$network_name}} --acl={{$network_name}}:github.com --acl={{$network_name}}:{{$long_domain}}
# Second app is only allowed to access $long_domain and $fake_domain.
eden pod deploy -n curl-acl2 --memory=512MB docker://itmoeve/eclient:0.4 -p 2224:22 --networks={{$network_name}} --acl={{$network_name}}:{{$long_domain}} --acl={{$network_name}}:{{$fake_domain}}

test eden.app.test -test.v -timewait 10m RUNNING curl-acl1 curl-acl2

exec -t 10m bash wait_ssh.sh 2223
exec -t 10m bash wait_ssh.sh 2224

exec sleep 10

# Try to curl hosts allowed by ACLs
exec -t 1m bash curl.sh 2223 github.com
stderr 'Connected to github.com'
exec -t 1m bash curl.sh 2223 {{$long_domain}}
stderr 'Connected to {{$long_domain}}'
! exec -t 1m bash curl.sh 2223 {{$fake_domain}}
! stderr 'Connected'
! exec -t 1m bash curl.sh 2223 google.com
! stderr 'Connected'

exec -t 1m bash curl.sh 2224 {{$long_domain}}
stderr 'Connected to {{$long_domain}}'
# TODO: ACLs + static DNS entries do not work together
#exec -t 1m bash curl.sh 2224 {{$fake_domain}}
#stderr 'Connected to {{$fake_domain}}'
! exec -t 1m bash curl.sh 2224 github.com
! stderr 'Connected'
! exec -t 1m bash curl.sh 2224 ieee.org
! stderr 'Connected'
! exec -t 1m bash curl.sh 2224 google.com
! stderr 'Connected'

# Wait for network packets information
exec -t 10m bash wait_netstat.sh curl-acl1 google.com github.com {{$long_domain}} {{$fake_domain}}
stdout 'google.com'
stdout 'github.com'
stdout '{{$long_domain}}'
stdout '{{$fake_domain}}'
! stdout 'ieee.org'
exec -t 10m bash wait_netstat.sh curl-acl2 google.com github.com {{$long_domain}} ieee.org
stdout 'google.com'
stdout 'github.com'
stdout '{{$long_domain}}'
! stdout '{{$fake_domain}}'
stdout 'ieee.org'

# Cleanup - undeploy applications
eden pod delete curl-acl1
eden pod delete curl-acl2
test eden.app.test -test.v -timewait 10m - curl-acl1 curl-acl2

# Cleanup - remove network
eden network delete {{$network_name}}
test eden.network.test -test.v -timewait 10m - {{$network_name}}
eden network ls
! stdout '^{{$network_name}}\s'

-- wait_ssh.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
for p in $*
do
  for i in `seq 20`
  do
    sleep 20
    # Test SSH-access to container
    echo {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue
    {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue && break
  done
done

-- dns_lookup.sh --

# Performs DNS lookup for a given hostname and adds host_ip=<ip> into the .env file
# Uses dig command which is already included by most modern Linux systems and also macOS.
# Usage: dns_lookup.sh <hostname>

IP=$(dig +short $1)
echo host_ip=$IP>>.env

-- curl.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}}$HOST -p $1 curl -v --max-time 30 "$2"
{{template "ssh"}}$HOST -p $1 curl -v --max-time 30 "$2"

-- wait_netstat.sh --
#!/bin/sh
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

echo "Waiting for netstat results"
for p in ${@: 2}
do
  until "$EDEN" pod logs --fields=netstat $1 | grep "$p"; do sleep 30; done
done
"$EDEN" pod logs --fields=netstat $1

-- eden-config.yml --
{{/* Test's config file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
