# Simple test of ETH passthrough functionality after reboot of a guest

{{define "network"}}n1{{end}}
{{define "port"}}2223{{end}}
{{define "virtio_iface"}}enp3s0{{end}}
{{define "passthrough_iface"}}enp4s0{{end}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa -p {{template "port"}} ubuntu@{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop

# Apply custom devmodel where usage of eth1 is PhyIoUsageNone and therefore it is available for passthrough.
eden config set $EDEN_CONFIG --key eve.devmodelfile --value $WORK/devmodel.json

# Re-generate device config
message 'Resetting of EVE'
eden eve reset

# Make sure that if test fails mid-through, devmodelfile will be left unset.
eden config set $EDEN_CONFIG --key eve.devmodelfile

# Changes in physicalIO require reboot
eden -t 2m eve stop
! stderr .
exec sleep 1m
eden -t 2m eve start
! stderr .

# Deploy VM into network where only github.com is accessible
eden network create 10.11.12.0/24 -n {{template "network"}}
test eden.network.test -test.v -timewait 10m ACTIVATED {{template "network"}}
exec -t 20m bash deploy.sh {{template "network"}} {{template "port"}}
test eden.app.test -test.v -timewait 20m RUNNING app

# Wait for VM to boot
exec -t 20m bash ssh.sh
stdout 'Ubuntu'

# Check that passthrough interface is present and functional
exec -t 20m bash check_passthrough.sh

# reboot from guest
exec -t 20m bash reboot.sh
exec sleep 1m
exec -t 20m bash ssh.sh
stdout 'Ubuntu'

# Re-check passthrough interface after reboot.
# It also fails if there wasn't actually any reboot since the last check.
exec -t 20m bash check_passthrough.sh

# Cleanup - undeploy application
eden pod delete app
test eden.app.test -test.v -timewait 10m - app

# Cleanup - remove network
eden network delete {{template "network"}}
test eden.network.test -test.v -timewait 10m - {{template "network"}}
eden network ls
! stdout '^{{template "network"}}\s'

# Restore original devmodel (devmodelfile is already unset in the config)
message 'Resetting of EVE'
eden eve reset

# Changes in physicalIO require reboot
eden -t 2m eve stop
! stderr .
exec sleep 1m
eden -t 2m eve start
! stderr .

-- deploy.sh --

NETWORK=$1
PORT=$2
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

IMG="https://cloud-images.ubuntu.com/releases/focal/release-20210510/ubuntu-20.04-server-cloudimg-amd64.img"
PUB_KEY="$( cat {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa.pub )"
$EDEN pod deploy -n app --networks=${NETWORK} --acl=${NETWORK}:github.com -p ${PORT}:22 --adapters eth1 --memory=1GB ${IMG} --metadata="#cloud-config\nssh_authorized_keys:\n - $PUB_KEY mykey@host"

-- ssh.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
for i in `seq 20`
do
 sleep 20
 # Test SSH-access to VM
 echo $i\) {{template "ssh"}}$HOST grep Ubuntu /etc/issue
 {{template "ssh"}}$HOST grep Ubuntu /etc/issue && break
done

-- reboot.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
echo {{template "ssh"}}$HOST 'sudo shutdown -r +1 &>/dev/null &'
{{template "ssh"}}$HOST 'sudo shutdown -r +1 &>/dev/null &'

-- check_passthrough.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

CMDS="
uptime -s;
sudo lshw -class network;
ip addr;
! ls /tmp/passthrough-checked || exit;
sudo sysctl -w net.ipv4.conf.all.rp_filter=0;
sudo sysctl -w net.ipv4.conf.default.rp_filter=0;
sudo dhclient {{template "passthrough_iface"}};
sleep 20;
ip addr;
ping -c 5 -I {{template "virtio_iface"}} github.com || exit;
ping -c 5 -I {{template "passthrough_iface"}} github.com || exit;
! ping -c 5 -I {{template "virtio_iface"}} google.com || exit;
ping -c 5 -I {{template "passthrough_iface"}} google.com || exit;
touch /tmp/passthrough-checked
"
echo {{template "ssh"}}$HOST "$CMDS"
{{template "ssh"}}$HOST "$CMDS"

-- devmodel.json --

{
  "ioMemberList": [
    {
      "ztype": 1,
      "phylabel": "eth0",
      "phyaddrs": {
        "Ifname": "eth0"
      },
      "logicallabel": "eth0",
      "assigngrp": "eth0",
      "usage": 2,
      "usagePolicy": {
        "freeUplink": true
      }
    },
    {
      "ztype": 1,
      "phylabel": "eth1",
      "phyaddrs": {
        "Ifname": "eth1"
      },
      "logicallabel": "eth1",
      "assigngrp": "eth1",
      "usage": 0,
      "usagePolicy": {
        "freeUplink": true
      }
    }
  ]
}
