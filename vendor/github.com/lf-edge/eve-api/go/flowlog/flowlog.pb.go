// Copyright(c) 2017-2019 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: flowlog/flowlog.proto

package flowlog

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACLAction int32

const (
	ACLAction_ActionUnknown ACLAction = 0
	ACLAction_ActionDrop    ACLAction = 1
	ACLAction_ActionAccept  ACLAction = 2
)

// Enum value maps for ACLAction.
var (
	ACLAction_name = map[int32]string{
		0: "ActionUnknown",
		1: "ActionDrop",
		2: "ActionAccept",
	}
	ACLAction_value = map[string]int32{
		"ActionUnknown": 0,
		"ActionDrop":    1,
		"ActionAccept":  2,
	}
)

func (x ACLAction) Enum() *ACLAction {
	p := new(ACLAction)
	*p = x
	return p
}

func (x ACLAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLAction) Descriptor() protoreflect.EnumDescriptor {
	return file_flowlog_flowlog_proto_enumTypes[0].Descriptor()
}

func (ACLAction) Type() protoreflect.EnumType {
	return &file_flowlog_flowlog_proto_enumTypes[0]
}

func (x ACLAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLAction.Descriptor instead.
func (ACLAction) EnumDescriptor() ([]byte, []int) {
	return file_flowlog_flowlog_proto_rawDescGZIP(), []int{0}
}

type IpFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`            // Source address
	SrcPort  int32  `protobuf:"varint,2,opt,name=srcPort,proto3" json:"srcPort,omitempty"`   // Source port
	Dest     string `protobuf:"bytes,3,opt,name=dest,proto3" json:"dest,omitempty"`          // Destination address
	DestPort int32  `protobuf:"varint,4,opt,name=destPort,proto3" json:"destPort,omitempty"` // Destination port
	Protocol int32  `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"` // Protocol
}

func (x *IpFlow) Reset() {
	*x = IpFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowlog_flowlog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpFlow) ProtoMessage() {}

func (x *IpFlow) ProtoReflect() protoreflect.Message {
	mi := &file_flowlog_flowlog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpFlow.ProtoReflect.Descriptor instead.
func (*IpFlow) Descriptor() ([]byte, []int) {
	return file_flowlog_flowlog_proto_rawDescGZIP(), []int{0}
}

func (x *IpFlow) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *IpFlow) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *IpFlow) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *IpFlow) GetDestPort() int32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

func (x *IpFlow) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type ScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`               // UUID of the instance or device
	Intf        string `protobuf:"bytes,2,opt,name=intf,proto3" json:"intf,omitempty"`               // User visible name
	LocalIntf   string `protobuf:"bytes,3,opt,name=localIntf,proto3" json:"localIntf,omitempty"`     // Internal name of the interface
	NetInstUUID string `protobuf:"bytes,4,opt,name=netInstUUID,proto3" json:"netInstUUID,omitempty"` // UUID of the network instance
}

func (x *ScopeInfo) Reset() {
	*x = ScopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowlog_flowlog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeInfo) ProtoMessage() {}

func (x *ScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flowlog_flowlog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeInfo.ProtoReflect.Descriptor instead.
func (*ScopeInfo) Descriptor() ([]byte, []int) {
	return file_flowlog_flowlog_proto_rawDescGZIP(), []int{1}
}

func (x *ScopeInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ScopeInfo) GetIntf() string {
	if x != nil {
		return x.Intf
	}
	return ""
}

func (x *ScopeInfo) GetLocalIntf() string {
	if x != nil {
		return x.LocalIntf
	}
	return ""
}

func (x *ScopeInfo) GetNetInstUUID() string {
	if x != nil {
		return x.NetInstUUID
	}
	return ""
}

type FlowRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow    *IpFlow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	Inbound bool    `protobuf:"varint,2,opt,name=inbound,proto3" json:"inbound,omitempty"` // true if the connection originated from outside
	AclId   int32   `protobuf:"varint,3,opt,name=aclId,proto3" json:"aclId,omitempty"`     // Matching ACL
	AclName string  `protobuf:"bytes,4,opt,name=aclName,proto3" json:"aclName,omitempty"`  // Name of the ACL
	// deprecated = 5;
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startTime,proto3" json:"startTime,omitempty"` // Always non-zero
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endTime,proto3" json:"endTime,omitempty"`     // Zero() if flow has not ended
	TxBytes   int64                  `protobuf:"varint,8,opt,name=txBytes,proto3" json:"txBytes,omitempty"`
	TxPkts    int64                  `protobuf:"varint,9,opt,name=txPkts,proto3" json:"txPkts,omitempty"`
	RxBytes   int64                  `protobuf:"varint,10,opt,name=rxBytes,proto3" json:"rxBytes,omitempty"`
	RxPkts    int64                  `protobuf:"varint,11,opt,name=rxPkts,proto3" json:"rxPkts,omitempty"`
	Action    ACLAction              `protobuf:"varint,12,opt,name=action,proto3,enum=org.lfedge.eve.flowlog.ACLAction" json:"action,omitempty"`
}

func (x *FlowRecord) Reset() {
	*x = FlowRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowlog_flowlog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRecord) ProtoMessage() {}

func (x *FlowRecord) ProtoReflect() protoreflect.Message {
	mi := &file_flowlog_flowlog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRecord.ProtoReflect.Descriptor instead.
func (*FlowRecord) Descriptor() ([]byte, []int) {
	return file_flowlog_flowlog_proto_rawDescGZIP(), []int{2}
}

func (x *FlowRecord) GetFlow() *IpFlow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowRecord) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *FlowRecord) GetAclId() int32 {
	if x != nil {
		return x.AclId
	}
	return 0
}

func (x *FlowRecord) GetAclName() string {
	if x != nil {
		return x.AclName
	}
	return ""
}

func (x *FlowRecord) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *FlowRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *FlowRecord) GetTxBytes() int64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *FlowRecord) GetTxPkts() int64 {
	if x != nil {
		return x.TxPkts
	}
	return 0
}

func (x *FlowRecord) GetRxBytes() int64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *FlowRecord) GetRxPkts() int64 {
	if x != nil {
		return x.RxPkts
	}
	return 0
}

func (x *FlowRecord) GetAction() ACLAction {
	if x != nil {
		return x.Action
	}
	return ACLAction_ActionUnknown
}

type DnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName    string                 `protobuf:"bytes,1,opt,name=hostName,proto3" json:"hostName,omitempty"`       // Host name
	Addrs       []string               `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`             // Ipv4 or Ipv6 address
	RequestTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=requestTime,proto3" json:"requestTime,omitempty"` // Time of DNS request
	AclNum      int32                  `protobuf:"varint,4,opt,name=aclNum,proto3" json:"aclNum,omitempty"`          // ACL that resulted in DNS lookup
}

func (x *DnsRequest) Reset() {
	*x = DnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowlog_flowlog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRequest) ProtoMessage() {}

func (x *DnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flowlog_flowlog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRequest.ProtoReflect.Descriptor instead.
func (*DnsRequest) Descriptor() ([]byte, []int) {
	return file_flowlog_flowlog_proto_rawDescGZIP(), []int{3}
}

func (x *DnsRequest) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DnsRequest) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *DnsRequest) GetRequestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestTime
	}
	return nil
}

func (x *DnsRequest) GetAclNum() int32 {
	if x != nil {
		return x.AclNum
	}
	return 0
}

//  This is the request payload for POST /api/v1/edgeDevice/flowlog
// FlowMessage carries device logs to the controller.
// The message is assumed to be protected by a TLS session bound to the
// device certificate.
type FlowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevId   string        `protobuf:"bytes,1,opt,name=devId,proto3" json:"devId,omitempty"` // Device UUID
	Scope   *ScopeInfo    `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Flows   []*FlowRecord `protobuf:"bytes,3,rep,name=flows,proto3" json:"flows,omitempty"`
	DnsReqs []*DnsRequest `protobuf:"bytes,4,rep,name=dnsReqs,proto3" json:"dnsReqs,omitempty"`
}

func (x *FlowMessage) Reset() {
	*x = FlowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowlog_flowlog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMessage) ProtoMessage() {}

func (x *FlowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_flowlog_flowlog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMessage.ProtoReflect.Descriptor instead.
func (*FlowMessage) Descriptor() ([]byte, []int) {
	return file_flowlog_flowlog_proto_rawDescGZIP(), []int{4}
}

func (x *FlowMessage) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

func (x *FlowMessage) GetScope() *ScopeInfo {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *FlowMessage) GetFlows() []*FlowRecord {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *FlowMessage) GetDnsReqs() []*DnsRequest {
	if x != nil {
		return x.DnsReqs
	}
	return nil
}

var File_flowlog_flowlog_proto protoreflect.FileDescriptor

var file_flowlog_flowlog_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x6f, 0x67, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x6f, 0x67, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x80, 0x01, 0x0a, 0x06, 0x49, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x22, 0x73, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0x99, 0x03, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x6f, 0x67, 0x2e, 0x49,
	0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x6c, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x78, 0x50, 0x6b, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x78, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x78, 0x50, 0x6b, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x78, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6c,
	0x6f, 0x67, 0x2e, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0xd4, 0x01, 0x0a, 0x0b,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6c,
	0x6f, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x6f, 0x67, 0x2e, 0x44,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x73, 0x2a, 0x40, 0x0a, 0x09, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x10, 0x02, 0x42, 0x3f, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6c, 0x6f, 0x67, 0x5a, 0x25,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64,
	0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c,
	0x6f, 0x77, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flowlog_flowlog_proto_rawDescOnce sync.Once
	file_flowlog_flowlog_proto_rawDescData = file_flowlog_flowlog_proto_rawDesc
)

func file_flowlog_flowlog_proto_rawDescGZIP() []byte {
	file_flowlog_flowlog_proto_rawDescOnce.Do(func() {
		file_flowlog_flowlog_proto_rawDescData = protoimpl.X.CompressGZIP(file_flowlog_flowlog_proto_rawDescData)
	})
	return file_flowlog_flowlog_proto_rawDescData
}

var file_flowlog_flowlog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flowlog_flowlog_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_flowlog_flowlog_proto_goTypes = []interface{}{
	(ACLAction)(0),                // 0: org.lfedge.eve.flowlog.ACLAction
	(*IpFlow)(nil),                // 1: org.lfedge.eve.flowlog.IpFlow
	(*ScopeInfo)(nil),             // 2: org.lfedge.eve.flowlog.ScopeInfo
	(*FlowRecord)(nil),            // 3: org.lfedge.eve.flowlog.FlowRecord
	(*DnsRequest)(nil),            // 4: org.lfedge.eve.flowlog.DnsRequest
	(*FlowMessage)(nil),           // 5: org.lfedge.eve.flowlog.FlowMessage
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_flowlog_flowlog_proto_depIdxs = []int32{
	1, // 0: org.lfedge.eve.flowlog.FlowRecord.flow:type_name -> org.lfedge.eve.flowlog.IpFlow
	6, // 1: org.lfedge.eve.flowlog.FlowRecord.startTime:type_name -> google.protobuf.Timestamp
	6, // 2: org.lfedge.eve.flowlog.FlowRecord.endTime:type_name -> google.protobuf.Timestamp
	0, // 3: org.lfedge.eve.flowlog.FlowRecord.action:type_name -> org.lfedge.eve.flowlog.ACLAction
	6, // 4: org.lfedge.eve.flowlog.DnsRequest.requestTime:type_name -> google.protobuf.Timestamp
	2, // 5: org.lfedge.eve.flowlog.FlowMessage.scope:type_name -> org.lfedge.eve.flowlog.ScopeInfo
	3, // 6: org.lfedge.eve.flowlog.FlowMessage.flows:type_name -> org.lfedge.eve.flowlog.FlowRecord
	4, // 7: org.lfedge.eve.flowlog.FlowMessage.dnsReqs:type_name -> org.lfedge.eve.flowlog.DnsRequest
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_flowlog_flowlog_proto_init() }
func file_flowlog_flowlog_proto_init() {
	if File_flowlog_flowlog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flowlog_flowlog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowlog_flowlog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowlog_flowlog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowlog_flowlog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowlog_flowlog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flowlog_flowlog_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flowlog_flowlog_proto_goTypes,
		DependencyIndexes: file_flowlog_flowlog_proto_depIdxs,
		EnumInfos:         file_flowlog_flowlog_proto_enumTypes,
		MessageInfos:      file_flowlog_flowlog_proto_msgTypes,
	}.Build()
	File_flowlog_flowlog_proto = out.File
	file_flowlog_flowlog_proto_rawDesc = nil
	file_flowlog_flowlog_proto_goTypes = nil
	file_flowlog_flowlog_proto_depIdxs = nil
}
