package utils

import (
	"bytes"
	"fmt"
	log "github.com/sirupsen/logrus"
	"os"
	"path/filepath"
	"text/template"
)

var defaultEnvState = `#generated by eden
qemu-config: {{ .QEMUConfig }}
eve-dir: {{ .EveDir }}
adam-dir: {{ .AdamDir }}
eve-config: {{ .DeviceUUID }}
`

//StateObject is structure to save state in file
type StateObject struct {
	EveConfig  string //if empty will not create/overwrite config file
	EveDir     string
	AdamDir    string
	EveUUID    string
	DeviceUUID string
	QEMUConfig string
}

//GenerateStateFile generates state in file
func GenerateStateFile(dirToSave string, state StateObject) error {
	state.DeviceUUID = filepath.Join(dirToSave, fmt.Sprintf("devUUID-%s.json", state.DeviceUUID))
	filePath := filepath.Join(dirToSave, fmt.Sprintf("state-%s.yml", state.EveUUID))
	if err := os.MkdirAll(filepath.Dir(filePath), 0755); err != nil {
		log.Fatal(err)
	}
	if _, err := os.Lstat(filePath); !os.IsNotExist(err) {
		if err := os.Remove(filePath); err != nil {
			log.Fatal(err)
		}
	}
	file, err := os.Create(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	t := template.New("t")
	_, err = t.Parse(defaultEnvState)
	if err != nil {
		return err
	}
	buf := new(bytes.Buffer)
	err = t.Execute(buf, state)
	if err != nil {
		return err
	}
	_, err = file.Write(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	if state.EveConfig != "" {
		if _, err := os.Lstat(state.DeviceUUID); !os.IsNotExist(err) {
			if err := os.Remove(state.DeviceUUID); err != nil {
				log.Fatal(err)
			}
		}
		configFile, err := os.Create(state.DeviceUUID)
		if err != nil {
			log.Fatal(err)
		}
		if _, err = configFile.WriteString(state.EveConfig); err != nil {
			log.Fatal(err)
		}
		defer configFile.Close()
		log.Infof("config updated %s", state.DeviceUUID)
	}
	log.Infof("state updated %s", filePath)
	return nil
}
