package utils

import (
	"bytes"
	"fmt"
	"github.com/satori/go.uuid"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	"os"
	"os/user"
	"path/filepath"
	"runtime"
	"strings"
	"text/template"
)

var defaultEnvConfig = `#generated by eden
adam-dist: {{ .Dist }}/adam
image-dist: {{ .Dist }}/images
downloader-dist: {{ .Dist }}/eve/dist/{{ .Arch }}
downloader-save: true
eserver-port: 8888
eserver-pid: {{ .Dist }}/eserver.pid
eserver-log: {{ .Dist }}/eserver.log
eve-arch: {{ .Arch }}
eve-os: {{ .OS }}
eve-accel: true
adam-port: 3333
eve-serial: 31415926
eve-cert: {{ .Dist }}/certs/onboard.cert.pem
eve-config: {{ .Dist }}/qemu.conf
eve-pid: {{ .Dist }}/eve.pid
eve-log: {{ .Dist }}/eve.log
adam-force: true
certs-dist: {{ .Dist }}/certs
domain: mydomain.adam
ip: {{ .IP }}
uuid: {{ .UUID }}
hv: kvm
eve-firmware: {{ .Dist }}/eve/dist/amd64/OVMF.fd
image-file: {{ .Dist }}/eve/dist/amd64/live.qcow2
dtb-part: 
eve-repo: https://github.com/lf-edge/eve.git
eve-tag: 5.1.11
eve-base-tag: 5.1.10
config-part: {{ .Dist }}/adam/run/config
adam-ca: {{ .Dist }}/adam/run/config/root-certificate.pem
logs: false
ssh-key: {{ .Dist }}/certs/id_rsa.pub
eve-hostfwd:
  2222: 22
  5912: 5901
  5911: 5900
  8027: 8027
  8028: 8028
eve-dist: {{ .Dist }}/eve
eve-base-dist: {{ .Dist }}/evebaseos
download: true
bin-dist: {{ .Dist }}/bin
docker-yml: {{ .Images }}/docker/alpine/alpine.yml
vm-yml: {{ .Images }}/vm/alpine/alpine.yml
`

//DefaultEdenDir returns path to default directory
func DefaultEdenDir() (string, error) {
	usr, err := user.Current()
	if err != nil {
		return "", err
	}
	return filepath.Join(usr.HomeDir, ".eden"), nil
}

//DefaultConfigPath returns path to default config
func DefaultConfigPath() (string, error) {
	usr, err := user.Current()
	if err != nil {
		return "", err
	}
	return filepath.Join(usr.HomeDir, ".eden", "config.yml"), nil
}

//LoadConfigFile load config from file with viper
func LoadConfigFile(config string) (loaded bool, err error) {
	if config == "" {
		config, err = DefaultConfigPath()
		if err != nil {
			return false, fmt.Errorf("fail in DefaultConfigPath: %s", err.Error())
		}
	}
	if _, err = os.Stat(config); os.IsNotExist(err) {
		if err = GenerateConfigFile(config); err != nil {
			return false, fmt.Errorf("fail in generate yaml: %s", err.Error())
		} else {
			log.Infof("Config file generated: %s", config)
		}
	}
	abs, err := filepath.Abs(config)
	if err != nil {
		return false, fmt.Errorf("fail in reading filepath: %s", err.Error())
	}
	base := filepath.Base(abs)
	path := filepath.Dir(abs)
	viper.SetConfigName(strings.Split(base, ".")[0])
	viper.AddConfigPath(path)
	if err := viper.ReadInConfig(); err != nil {
		return false, fmt.Errorf("failed to read config file: %s", err.Error())
	}
	return true, nil
}

//GenerateConfigFile is a function to generate default yml
func GenerateConfigFile(filePath string) error {
	currentPath, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}
	if err = os.MkdirAll(filepath.Dir(filePath), 0755); err != nil {
		log.Fatal(err)
	}
	file, err := os.Create(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	t := template.New("t")
	_, err = t.Parse(defaultEnvConfig)
	if err != nil {
		return err
	}
	buf := new(bytes.Buffer)
	ip, err := GetIPForDockerAccess()
	if err != nil {
		return err
	}
	id, err := uuid.NewV4()
	if err != nil {
		return err
	}
	err = t.Execute(buf,
		struct {
			Dist   string
			IP     string
			UUID   string
			Arch   string
			OS     string
			Images string
		}{
			Dist:   filepath.Join(currentPath, "dist"),
			IP:     ip,
			UUID:   id.String(),
			Arch:   runtime.GOARCH,
			OS:     runtime.GOOS,
			Images: filepath.Join(currentPath, "images"),
		})
	if err != nil {
		return err
	}
	_, err = file.Write(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	return nil
}
