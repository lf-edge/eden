package types

import (
	"fmt"
	"time"

	"github.com/lf-edge/eve-api/go/attest"
	"github.com/lf-edge/eve-api/go/certs"
	uuid "github.com/satori/go.uuid"
)

// DeviceStateFilter for filter device by state
type DeviceStateFilter int

var (
	// AllDevicesFilter returns all devices
	AllDevicesFilter DeviceStateFilter
	// RegisteredDeviceFilter returns registered devices
	RegisteredDeviceFilter DeviceStateFilter = 1
	// NotRegisteredDeviceFilter returns not registered devices
	NotRegisteredDeviceFilter DeviceStateFilter = 2
)

// PrintResult for representation of printing info/log/metric
// it contains print path string as a key of map
// []string as result of resolving of path string
type PrintResult map[string][]string

func (pr *PrintResult) getMap() map[string][]string {
	return *pr
}

// Print of PrintResult perform output of element of info/log/metric
// if one path string return it
// if multiple path string return them with : as delimiter between key and value and \t as delimiter between path strings
// if one element for path string result, return it as plain string
// if multiple elements, return them as array
func (pr *PrintResult) Print() {
	switch len(*pr) {
	case 0:
		return
	case 1:
		for _, el := range pr.getMap() {
			if len(el) == 1 {
				fmt.Println(el[0])
			} else {
				fmt.Println(el)
			}
			return
		}
	default:
		for k, el := range pr.getMap() {
			if len(el) == 1 {
				fmt.Printf("%s:%s\t", k, el[0])
			} else {
				fmt.Printf("%s:%s\t", k, el)
			}
		}
		fmt.Println()
	}
}

type getDir = func(devUUID uuid.UUID) (dir string)

type getDirApps = func(devUUID uuid.UUID, appUUID uuid.UUID) (dir string)

// DirGetters provides information about directories to obtain objects from for loaders
type DirGetters struct {
	LogsGetter    getDir
	InfoGetter    getDir
	MetricsGetter getDir
	FlowLogGetter getDir
	RequestGetter getDir
	AppsGetter    getDirApps
}

type getStream = func(devUUID uuid.UUID) (stream string)

type getStreamApps = func(devUUID uuid.UUID, appUUID uuid.UUID) (stream string)

// StreamGetters provides information about redis streams to obtain objects from for loaders
type StreamGetters struct {
	StreamLogs    getStream
	StreamInfo    getStream
	StreamMetrics getStream
	StreamFlowLog getStream
	StreamRequest getStream
	StreamApps    getStreamApps
}

type getURL = func(devUUID uuid.UUID) (url string)

type getURLApps = func(devUUID uuid.UUID, appUUID uuid.UUID) (url string)

// URLGetters provides information about urls to obtain objects from for loaders
type URLGetters struct {
	URLLogs    getURL
	URLInfo    getURL
	URLMetrics getURL
	URLFlowLog getURL
	URLRequest getURL
	URLApps    getURLApps
}

// LoaderObjectType for determinate object for loaders
type LoaderObjectType int

// LogsType for observe logs
var LogsType LoaderObjectType = 1

// InfoType for observe info
var InfoType LoaderObjectType = 2

// MetricsType for observe metrics
var MetricsType LoaderObjectType = 3

// RequestType for observe requests
var RequestType LoaderObjectType = 4

// AppsType for observe logs of apps
var AppsType LoaderObjectType = 5

// FlowLogType for observe FlowMessages
var FlowLogType LoaderObjectType = 6

// APIRequest stores information about requests from EVE
type APIRequest struct {
	Timestamp time.Time `json:"timestamp"`
	UUID      uuid.UUID `json:"uuid,omitempty"`
	ClientIP  string    `json:"client-ip"`
	Forwarded string    `json:"forwarded,omitempty"`
	Method    string    `json:"method"`
	URL       string    `json:"url"`
}

// OnboardCert encoding for sending an onboard cert and serials via json
// swagger:parameters onboard
type OnboardCert struct {
	//Cert for onboarding
	Cert []byte
	//Serial for onboarding
	Serial string
}

// DeviceCert encoding for sending a device information, including device cert, onboard cert, and serial, if any
type DeviceCert struct {
	Cert    []byte
	Onboard []byte
	Serial  string
}

// Zcerts stores device certificates
type Zcerts struct {
	Certs []*certs.ZCert `json:"certs,omitempty"` // EVE device certs
}

// PCRValue stores one single PCR value from TPM, from a particular hash bank
type PCRValue struct {
	Index uint32 `json:"index"`
	Value string `json:"value"` // may contain '*' to allow any value in template
}

// PCRTemplate stores template with EVE version, Firmware version, GPSInfo and set of PCRValues
type PCRTemplate struct {
	EveVersion      string      `json:"eveVersion"`
	FirmwareVersion string      `json:"firmwareVersion"`
	PCRValues       []*PCRValue `json:"PCRValues"`
}

// GlobalOptions configure controller behaviour for attestation requests
type GlobalOptions struct {
	EnforceTemplateAttestation bool           `json:"enforceTemplateAttestation"`
	PCRTemplates               []*PCRTemplate `json:"PCRTemplates"`
}

// DeviceOptions stores received nonce, PCRTemplate structure received from device
// and IntegrityToken generated by controller
type DeviceOptions struct {
	Nonce               string                     `json:"nonce"`
	IntegrityToken      string                     `json:"integrityToken"`
	ReceivedPCRTemplate *PCRTemplate               `json:"receivedPCRTemplate"`
	Attested            bool                       `json:"attested"`
	EventLog            []*attest.TpmEventLogEntry `json:"eventLog,omitempty"`
}

// OutputFormat the format to print output of metrics/logs/info
type OutputFormat byte

const (
	//OutputFormatLines returns line by line
	OutputFormatLines OutputFormat = iota
	//OutputFormatJSON returns in JSON format
	OutputFormatJSON
)
