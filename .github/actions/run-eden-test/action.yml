name: 'Run specified Eden test workflow'
description: 'Setup Eden run specified test from workflow and publish logs'

inputs:
  file_system:
    required: true
    type: string
  tpm_enabled:
    required: true
    type: bool
  suite:
    required: true
    type: string
  eve_image:
    type: string
  eve_log_level:
    type: string
    required: false
    default: 'info'
  eve_artifact_name:
    type: string
  artifact_run_id:
    type: string
  require_virtualization:
    type: bool
  docker_account:  # if not provided: use anonymous docker user
    type: string
    required: false
    default: ''
  docker_token:
    type: string
    required: false
    default: ''
  aziot_id_scope:
    description: 'Azure IoT ID scope'
    required: false
  aziot_connection_string:
    description: 'Azure IoT connection string'
    required: false


runs:
  using: 'composite'
  steps:
    - name: Collect Workflow Telemetry
      uses: catchpoint/workflow-telemetry-action@v2
      with:
        proc_trace_sys_enable: true
        comment_on_pr: false
    - name: Login to Docker Hub
      if: inputs.docker_account != ''
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_account }}
        password: ${{ inputs.docker_token }}
    - name: Setup Environment
      uses: ./eden/.github/actions/setup-environment
      with:
        eve_artifact_name: ${{ inputs.eve_artifact_name }}
        artifact_run_id: ${{ inputs.artifact_run_id }}
    - name: Configure
      run: |
        ./eden config add default
        require_virt="${{ inputs.require_virtualization }}"
        if [[ "$require_virt" == "true" ]]; then
          if ! lscpu | grep -oEq "vmx|svm"; then
            echo "Missing required HW-assisted virtualization support"
            exit 1
          fi
          ./eden config set default --key=eve.accel --value=true
        else
          ./eden config set default --key=eve.accel --value=false
          ./eden config set default --key=eve.firmware --value="$(pwd)/firmware/OVMF_CODE.fd $(pwd)/firmware/OVMF_VARS.fd"
        fi
        ./dist/bin/eden+ports.sh 2223:2223 2224:2224 5912:5902 5911:5901 8027:8027 8028:8028 8029:8029 8030:8030 8031:8031
        ./eden config set default --key=eve.tpm --value=${{ inputs.tpm_enabled }}
        ./eden config set default --key=eve.cpu --value=2
      shell: bash
      working-directory: "./eden"
    - name: Setup eve version
      run: |
        image=${{ inputs.eve_image }}
        if [[ -n "$image" && "$image" == *:* ]]; then
          echo "Setting up eve image ${image}"
          eve_pr_registry=$(echo "$image" |  cut -d ':' -f 1)
          eve_pr=$(echo "$image" |  cut -d ':' -f 2 | cut -d "-" -f1)
          # this will be empty if there is no rc in the tag
          eve_rc=$(echo "$image" |  cut -d ':' -f 2 | grep -Eo "\-rc[0-9]+" || printf "")
          ./eden config set default --key=eve.registry --value="$eve_pr_registry"
          ./eden config set default --key=eve.tag --value="$eve_pr$eve_rc"
        else
          echo "Skipping setting up eve image ${image}"
        fi
      shell: bash
      working-directory: "./eden"
    - name: Set eve log level
      run: ./eden config set default --key=eve.log-level --value=${{ inputs.eve_log_level }}
      shell: bash
      working-directory: "./eden"
    - name: Setup ext4
      if: inputs.file_system == 'ext4'
      run: ./eden setup -v debug
      shell: bash
      working-directory: "./eden"
    - name: Setup zfs
      if: inputs.file_system == 'zfs'
      run: |
        ./eden config set default --key=eve.disks --value=4
        ./eden config set default --key=eve.disk --value=4096
        ./eden setup -v debug --grub-options='set_global dom0_extra_args "$dom0_extra_args eve_install_zfs_with_raid_level "'
      shell: bash
      working-directory: "./eden"

    - name: Start and Onboard
      run: |
        ./eden start -v debug
        ./eden eve onboard -v debug
      shell: bash
      working-directory: "./eden"
    
    - name: Run tests
      run: EDEN_TEST_STOP=n ./eden test ./tests/workflow -s ${{ inputs.suite }} -v debug
      shell: bash
      working-directory: "./eden"
      env:
        AZIOT_ID_SCOPE: ${{ inputs.aziot_id_scope }}
        AZIOT_CONNECTION_STRING: ${{ inputs.aziot_connection_string }}
    - name: Collect info
      if: failure()
      uses: ./eden/.github/actions/collect-info
    - name: Collect logs
      if: always()
      uses: ./eden/.github/actions/publish-logs
      with:
        report_name: eden-report-${{ inputs.suite }}-tpm-${{ inputs.tpm_enabled }}-${{ inputs.file_system }}
    - name: Clean up after test
      if: always()
      run: |
        ./eden stop
        make clean >/dev/null
        docker system prune -f -a >/dev/null
      shell: bash
      working-directory: "./eden"
