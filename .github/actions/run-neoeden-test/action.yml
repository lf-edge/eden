name: 'Run Neo-Eden test workflow'
description: 'Setup Eden, run go test and publish logs'

inputs:
  file_system:
    required: true
    type: string
  tpm_enabled:
    required: true
    type: bool
  eve_image:
    type: string
  eve_log_level:
    type: string
    required: false
    default: 'info'
  eve_artifact_name:
    type: string
  artifact_run_id:
    type: string
  require_virtualization:
    type: bool
  docker_account:  # if not provided: use anonymous docker user
    type: string
    required: false
    default: ''
  docker_token:
    type: string
    required: false
    default: ''
  test_suite:
    type: string
  aziot_id_scope:
    description: 'Azure IoT ID scope'
    required: false
  aziot_connection_string:
    description: 'Azure IoT connection string'
    required: false


runs:
  using: 'composite'
  steps:
    - name: Collect Workflow Telemetry
      uses: catchpoint/workflow-telemetry-action@v2
      with:
        proc_trace_sys_enable: true
        comment_on_pr: false
    - name: Login to Docker Hub
      if: inputs.docker_account != ''
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_account }}
        password: ${{ inputs.docker_token }}
    - name: Setup Environment
      uses: ./eden/.github/actions/setup-environment
      with:
        eve_artifact_name: ${{ inputs.eve_artifact_name }}
        artifact_run_id: ${{ inputs.artifact_run_id }}
    - name: Run neoeden test suite
      shell: bash
      working-directory: ${{ inputs.test_suite }}
      env:
        AZIOT_ID_SCOPE: ${{ inputs.aziot_id_scope }}
        AZIOT_CONNECTION_STRING: ${{ inputs.aziot_connection_string }}
      run: |
        go test \
          -filesystem="${{ inputs.file_system }}" \
          -eve-image="${{ inputs.eve_image }}" \
          -eve-log-level="${{ inputs.eve_log_level }}" \
          -timeout 30m
    - name: Collect info
      if: failure()
      uses: ./eden/.github/actions/collect-info
    - name: Collect logs
      if: always()
      uses: ./eden/.github/actions/publish-logs
      with:
        report_name: eden-report-${{ inputs.test_suite }}-tpm-${{ inputs.tpm_enabled }}-${{ inputs.file_system }}
    - name: Clean up after test
      if: always()
      run: |
        ./eden stop
        make clean >/dev/null
        docker system prune -f -a >/dev/null
      shell: bash
      working-directory: "./eden"
