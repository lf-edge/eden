name: 'Setup environment to run eden tests'
description: 'Setup building dependencies, build and configure eden'

inputs:
  file_system:
    required: true
    type: string
  tpm_enabled:
    required: true
    type: bool
  eve_image:
    type: string
  eve_log_level:
    type: string
    required: false
    default: 'info'
  eve_artifact_name:
    type: string
  artifact_run_id:
    type: string
  require_virtualization:
    type: bool

runs:
  using: 'composite'
  steps:
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'
    - name: Check
      run: |
        for addr in $(ip addr list|sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
        do
            if echo "$addr" | grep -q -E "10.11.(12|13).[0-9]+"; then
              echo "$addr overlaps with test"; exit 1
            fi
        done
        df -h
        sudo swapoff -a
        free
      shell: bash
      working-directory: "./eden"
    - name: Install Packages
      run: |
        sudo add-apt-repository ppa:stefanberger/swtpm-jammy
        sudo apt install -y qemu-utils qemu-system-x86 jq swtpm util-linux socat
      shell: bash
    - name: Build tests
      run: |
        make build-tests
      shell: bash
      working-directory: "./eden"
    - name: Configure
      run: |
        ./eden config add default
        require_virt="${{ inputs.require_virtualization }}"
        if [[ "$require_virt" == "true" ]]; then
          if ! lscpu | grep -oEq "vmx|svm"; then
            echo "Missing required HW-assisted virtualization support"
            exit 1
          fi
          ./eden config set default --key=eve.accel --value=true
        else
          ./eden config set default --key=eve.accel --value=false
        fi
        ./eden config set default --key=eve.tpm --value=${{ inputs.tpm_enabled }}
        ./eden config set default --key=eve.cpu --value=2
      shell: bash
      working-directory: "./eden"
    - name: Download artifact if specified
      if: inputs.eve_artifact_name != ''
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ github.token }}
        name: ${{ inputs.eve_artifact_name }}
        path: artifacts  # this is the directory where it will put the artifact, not its name
        run-id: ${{ inputs.artifact_run_id }}
    - name: Load containers to docker if specified
      if: inputs.eve_artifact_name != ''
      run: |
        docker load -q -i artifacts/${{ inputs.eve_artifact_name }}.tar
        docker image ls
      shell: bash
    - name: Setup eve version
      run: |
        image=${{ inputs.eve_image }}
        if [[ -n "$image" && "$image" == *:* ]]; then
          echo "Setting up eve image ${image}"
          eve_pr_registry=$(echo "$image" |  cut -d ':' -f 1)
          eve_pr=$(echo "$image" |  cut -d ':' -f 2 | cut -d "-" -f1)
          ./eden config set default --key=eve.registry --value="$eve_pr_registry"
          ./eden config set default --key=eve.tag --value="$eve_pr"
        else
          echo "Skipping setting up eve image ${image}"
        fi
      shell: bash
      working-directory: "./eden"
    - name: Set eve log level
      run: ./eden config set default --key=eve.log-level --value=${{ inputs.eve_log_level }}
      shell: bash
      working-directory: "./eden"
    - name: Setup ext4
      if: inputs.file_system == 'ext4'
      run: ./eden setup -v debug
      shell: bash
      working-directory: "./eden"
    - name: Setup zfs
      if: inputs.file_system == 'zfs'
      run: |
        ./eden config set default --key=eve.disks --value=4
        ./eden config set default --key=eve.disk --value=4096
        ./eden setup -v debug --grub-options='set_global dom0_extra_args "$dom0_extra_args eve_install_zfs_with_raid_level "'
      shell: bash
      working-directory: "./eden"
